[
    {
        "url": "/post/the-seven-stages-of-expertise-in-software-engineering/",
        "title": "The Seven Stages of Expertise in Software Engineering",
        "date": "Tue Apr 25 2023 00:00:00 GMT+0000 (Coordinated Universal Time)",
        "author": "Meilir Page-Jones | Balázs HIDEGHÉTY",
        "image": "",
        "tags": ["posts","HR","classification","startups","team-setup","avoid-failures","entrepreneur","SME"],
        "categories": [["Uncategorized"]],
        "summary": "<p>This article is still <strong>relevant for any startup or company involved in software development</strong>. It contains useful informations - just like &quot;Clean Code&quot; by Robert C Martin - <strong>details within this article are timeless</strong>.</p>\n<p>I first came across this article around 2016, when I noticed a large <strong>disparity between the usual junior-mid-senior scaling</strong> of developers. This scaling system, unlike …</p>\n",
        "text": "This article is still relevant for any startup or company involved in software development. It contains useful informations - just like “Clean Code” by Robert C Martin - details within this article are timeless.\nI first came across this article around 2016, when I noticed a large disparity between the usual junior-mid-senior scaling of developers. This scaling system, unlike others, is universal, easy to understand, and the bear hunting analogy used in the original article by Meilir Page-Jones makes it a humorous and enjoyable read.\nSince then, the original page has been taken down (an archive can be found here). With the permission of the author, I am allowed to distribute the original article.\nI made some slight changes by adding additional titles and styling. Since there is more behind the seven stages, it is likely to be referenced frequently.\nWe hope you enjoy reading this article and that it helps your next projects be successful.\n\nThe Seven Stages of Expertise in SWE\nMeilir Page-Jones © Copyright 1998, Wayland Systems Inc. All rights reserved.\n(In this article, an indefinite “he” means “he or she”.)\nIntro\nFor almost two decades we at Wayland Systems Inc. have toiled to transfer the latest developments in software engineering to practitioners at large and small companies around the world. However, until recently we didn’t do a very good job of quantifying the long-term field results of our efforts. So we decided to ask a question reminiscent of the rhetoric of Ed Koch (the former mayor of New York City): “How’re we doin’?”\nWe surveyed some of our clients to whom we’d provided education and consulting over the years and discovered an interesting but very disturbing fact. Over 50% of the shops into which we’d introduced Software Engineering techniques had either abandoned the use of the techniques or had let their band of active practitioners shrink to a dwindling core of diehards. What was going wrong here?\nWe turned to self-examination and reviewed our courses and consulting practices. But, whatever the problem was, it didn’t seem limited to Wayland Systems: Informal discussions with our competitors revealed that they too were having similar problems. The attrition rate across our whole industry was painfully high.\nFactors Affecting Productivity\nExternal examination revealed several factors at work, many of which were to do with corporate management habits. Examples of these were:\n\nunrealistic management expectations\na lack of commitment to quality\nan obsession with coding (which we termed WIMP — “Why isn’t Marvin Programming?” — management)\npernicious deadlines\nand a misallocation of skills to tasks\n\nOther factors included: engineers’ resistance to change; engineers’ reluctance to participate in team approaches; and the then-unavailability of useful CASE tools.\nThe above factors were significant and worthy of articles in their own right. However, there was another factor, which is more important and fundamental than the others. This factor is the way that people are able to absorb sophisticated new techniques and then to apply them to their work — in other words the stages of expertise through which we all pass as we learn and use new and powerful disciplines.\nAt first we were aware only that there were two types of person: novice and expert. That was hardly earth-shattering news. However, further research revealed that there are actually seven stages of expertise through which a person may pass on the journey from total ignorance to world-class knowledge. With devastating acumen we numbered these seven stages Stages 1 through 7. (We also gave them names: Innocent, Exposed, Apprentice, Practitioner, Journeyman, Master and Expert.) As I’ll discuss below, these seven stages have a deep impact on the successful — or otherwise — introduction of software engineering into an organization.\nA participant at a conference asked me how universal these seven stages are.\n\n“Very universal,” I answered.\n“You mean that I could even apply them to the skill of bear-hunting?” he retorted unexpectedly.\n“Yes,” I said.\n\nSo, if you’ll bear with me, I should like to illustrate the Seven Stages of Expertise with reference to hunting (although I’m most definitely not a fan of such an activity). Following that illustration I’ll outline the application of the Seven Stages to our own business of Software Engineering.\nThe 7 Stages in Bear-Hunting\nStage 1: Innocent\n— A Stage-1 person has never seen or heard of bears. It would not occur to a Stage-1, if he encountered a bear, that the bear could be hunted. Neither would he realize that a bear is a potential source of danger.\nStage 2: Exposed\n— A Stage-2 person has seen an occasional bear and has read articles in airline magazines suggesting that bears may be hunted. Moreover, a Stage-2 probably has friends that have hunted bears and has learned some desultory but intriguing facts about bears and their habits. He is motivated to learn more.\nStage 3: Apprentice\n— A Stage-3 has attended a 5-day seminar on bear hunting. During this seminar, the participants form into teams of three or four and practice hunting very small bears under the ever-watchful eye of the instructor. After a few interim setbacks, by Friday afternoon all the teams have successfully hunted their bears. They fill out evaluation forms attesting that “bear hunting is very useful and relevant to my job.” However, they are barely prepared for the world of real bears.\nStage 4: Practitioner\n— The Stage-4, having completed formal bear-hunting education, is full of confidence. He’s ready to transcend the minuscule bears of the 5-day workshop and go out for real bears, larger bears, fierce bears. He’s ready for Ursa Major. His manager is also keen to send him out with the latest bear-hunting techniques because the users want fur and they want it yesterday. Unfortunately, in the resulting scramble the budding bear hunter may be sent out without a map and with the wrong calibre arrow in his longbow. In the heat of ursine confrontation, the Stage-4 may also forget or misinterpret his classroom instruction and precipitate disaster. It’s typical that some Stage-4s get some bears; but it’s also typical that some bears get some Stage-4s.\nStage 5: Journeyman\n— The Stage-5 has survived the traumas of Stage-4 and has bear hunting down cold. The Stage-5 uses modern bear-hunting techniques naturally and automatically; in fact, he can’t imagine how he ever got along without them. He is accurate and productive: The Steering Committee merely points out the bear and he hunts it within both budget and deadline. The Stage-5 is the exemplary modern hunter that salespeople of bear-hunting seminars refer to in their brochures.\nStage 6: Master\n— Stage-6 bear hunters have internalised not only the mechanics of bear hunting but also the principles underlying the techniques. Stage-6s know more than rules: They know why the rules exist and even when it’s permissible to break them. For example, a Stage-3 or 4 may stand upwind of a bear accidentally and scare off the bear. However, a Stage-6 may know that by wearing Yogi-Spray Deodorant he can stand upwind without being detected and can thus surprise the bear from an unexpected quarter. Because of their deep knowledge, Stage-6s are very capable of training others in hunting techniques.\nStage 7: Researcher\n— Stage-7s are asked to write books and give talks at bear-hunting user groups. They are also engaged in extending and generalizing bear-hunting techniques to solve new problems. For example, a Stage-7 may extend bear hunting to work also on Big Foot or he may even develop the ultimate Yeti-Oriented Hunting Methodology.\nThe 7 Stages in SWE\nNow let’s come back to the world of software engineering and see how the Seven Stages of Expertise apply to us.\nStage 1: Innocent\nA Stage-1 may not have heard of Software-Engineering techniques. Or — more likely nowadays — he may be vaguely aware of their existence but may not see their possible relevance to his situation. Indeed, he may be only dimly aware that there are any software-development problems in his shop. You may find it incredible that Stage-1s could exist in the 1990s, but they do. And the reason stems from the way in which software complexity evolved.\nSoftware became insidiously more and more complex in the 1970s and 1980s as users demanded more and more sophisticated systems be installed on the more and more powerful hardware that became available. Yet there was no sharp transition. The earth was not hit by a Complexity Asteroid in 1975 that suddenly made software three orders of magnitude more complex and cast our reptilian development techniques into extinction.\nI call the way in which software complexity actually increased “Frog in the Pan.” This is because although a frog will jump out of a pan of hot water, a frog that is placed in a pan of cold water and slowly heated will fail to leap forth and will actually boil to death. The temperature gradient is so gradual that there will never be a point at which the frog declares: “Boy, it’s suddenly gotten hot in here! I think I should hop out.” (Before I get into deeper trouble from animal-rights folks, I hasten to add that this analogy is apocryphal. I’ve never tried the experiment and I don’t recommend that you do so either!)\nMany Stage-1s are experiencing “Frog in the Pan” and are trying to tackle problems of the 1990s with approaches of the 1960s and 1970s, without realizing that the problems they’re facing are the very ones that modern Software-Engineering techniques were created to alleviate.\nStage 2: Exposed\nStage-2s have noticed that the water is getting decidedly warm, if not downright hot. So they are actively seeking Software-Engineering techniques that will get them out of the pan or at least reduce the heat. Stage-2s may survey magazines, confer with colleagues or attend one-day overviews of the techniques. Their interest level is high but their knowledge level is low, being limited to a few terms and definitions and not based on any practical Software-Engineering experience.\nStage 3: Apprentice\nStage-3s have attended one or two 5-day workshops on Software-Engineering techniques. In these workshops they tackled small but realistic case studies that resembled their own projects in miniature. The case studies provided valuable kinaesthetic reinforcement of the formal lecture material and were thus indispensable. However, the case studies’ apparent realism conveyed to the Stage-3 a confidence that is often unwarranted.\nIf a Stage-3 absorbs everything from a seminar, then he is minimally equipped to tackle a true, full-sized project in the corporate jungle. Usually, however, a Stage-3 does not grasp everything or has difficulty scaling the techniques up from a case study to a real project. You could say that most Stage-3s know just enough to be dangerous!\nStage 4: Practitioner\nThe rite of passage to Stage-4 is the use of Software-Engineering techniques on at least one significant project. Achieving “Stage-4-hood” is for many people the most difficult transition of the six transitions between stages. The fledgling Stage-4 is asked to take untried (by him) techniques and apply them to a corporate project with the usual demonic cocktail of politics, deadlines and changing requirements. At the same time, he is attempting to recall what he learned in class and scale up the examples 10- or 100-fold. He continually needs consulting advice, without which he will encounter a series of minor setbacks or major failures. Since many people throw up their hands at this point and revert to their old mediocre but familiar ways, a large proportion of Stage-3s never make it to Stage-4. If an entire project is peopled with Stage-3s, then it’s highly likely that the project itself will fail and the Software-Engineering techniques will be publicly pilloried and then abandoned.\nStage 5: Journeyman\nStage-5s have made it. Their experience of Software Engineering is “latched” in place and there is little risk of their reverting to the past. In the Stage-5 the Software Engineering techniques yield for the first time the productivity the marketing folks promised; and on each successive project a Stage-5 further hones his skill and enhances his productivity. A Stage-5 is self-sufficient - more often the source of Software-Engineering advice than its recipient.\nStage 6: Master\nThe Stage-6 not only is an adept technician, but also possesses a profound methodological foundation. Beyond the “whats” and “hows”, the Stage-6 knows the “whys” of Software Engineering. This depth allows him sometimes to break a surface rule, while adhering to a more fundamental methodological principle. The Stage-6 is a good instructor because his theoretical and practical knowledge give him the wherewithal to tackle difficult student questions.\nStage 7: Researcher\nThe Stage-7 is concerned with delivering the latest developments in Software Engineering to a wider audience, via books, articles and conference appearances. The Stage-7 looks out for flaws in contemporary Software-Engineering techniques and for consequent ways to improve the techniques. He also scans the horizon for new problems towards whose solution Software Engineering can be extended and generalized. The Stage-7 is at a methodological pinnacle.\nBehind the Seven Stages (Productivity, Starting Projects, …)\nThese Seven Stages of Expertise are valuable in their own right. You might think about a Software-Engineering technique that you know and consider which of the stages you are in with respect to that technique. You may also decide what (if anything) you should do to progress to the next stage.\nHowever, there are organizational implications behind the Seven Stages. Below I discuss four of these:\n\nThe Productivity Curve\nPilot Projects\nThe Critical Consulting Core and Ephemeral Technology.\n\nA. The Productivity Curve\nVendors who sell Software-Engineering techniques do so by convincing management of their boon to productivity. Although vendors rarely say so explicitly — we at Wayland Systems never used to — they compare the productivity of Stage-5s to that of Stage-2s. Unfortunately, this presentation (see Fig. 1) is not a complete picture. Between Stage-3 and Stage-4 there’s a hair-raising “J-curve” of productivity (see Fig. 2), which represents the difficult rite of passage of the incipient Stage-4.\n\nFig. 1 - The productivity curve as perceived by managers\n\nFig. 2 - The actual productivity curve as observed in reality\n\nThis J-curve has led more than one manager to abandon all hope in Software-Engineering techniques. Such a manager is not merely impatient; no one warned him of the J-curve and so when it manifests itself he can only assume that the much-touted Software-Engineering techniques were mere hokum.\nA couple of our clients measured the length of time from Stages 3 to 5. Depending on the individual person, Stage-3 to Stage-4 took 6 to 18 months (about the length of a project or phase) and Stage-4 to Stage-5 took 18 to 36 months. (These times are very approximate because of the subjective nature of the stages.) Except for a few outstanding people, the shortest time from Software-Engineering seminar to exquisite software productivity is 24 months. When managers tell me: “We just can’t wait that long,” I retort: “The 2 years will pass anyway, whether you do anything or not. Act now!”\n(By the way, notice that Stage-7s have lower project productivity than Stage-6s. This is because a portion of Stage-7s’ energy is directed away from the specific project and towards general methodological research.)\nB. Pilot Projects\nBut the J-curve has a facet nastier than simple delay in productivity. This is the “Who will bell the cat?” problem. In the fable of that title, a group of mice that’d been persecuted by a cat decided to hang a bell around the cat’s neck that would warn them of its approach. All agreed that this was a wonderful idea … but there was one minor difficulty: None of the mice wanted to be the one to risk walking up to the sleeping cat to tie a bell around its neck. This impasse is known formally as the Technology Trap.\nMost project managers would agree that Software-Engineering techniques are a Good Thing. But which of them with bone-crushing deadlines and axe-wielding users wants to be the first to experience the depths of the J-curve. (Me neither!) Thus many shopfuls of intelligent people appear to be dinosaurs because the Technology Trap holds them in the 1970s.\nIf “who will bell the cat?” is a problem, then I recommend that you try Software-Engineering techniques on a pilot project first. The pilot will uncover all manner of pitfalls that occur during the Stage-3/4 transition as well as problems in the techniques themselves. The pilot should be short (6 months) and should yield a non-critical system. You should learn as much as you can about applying the new technology from the pilot project; this is one project where the learning experience is more important than the end product.\nA pilot project will not eliminate J-curves on subsequent projects. People will still have to go from Stage-3 to Stage-4. But the pilot will make future J-curves shallower, as some causes of the curve’s nadir are removed. Indeed, although the delivered system is the most important product of most projects, you should never forget the learning by-product of every project. Review what you discovered about doing projects when you complete each project and share that information with others. In that sense, treat every project as a pilot.\nC. Core of Internal / External Consultants\nOne of the surest recipes for disaster is to staff a project with only Stage-3s. Yet many managers do exactly that, pushing a group of analysts through a seminar one week and letting them loose on a crucial project the next week. (Jerry Weinberg refers to this as the “Sheep Dip” approach.)\nEvery project should have access to a Stage-5, or - better still — have a Stage-5 on the project team. Cultivate your own Stage-5s and Stage-6s in-house as part of your long-term staff-development policy and make them available to project teams. If you don’t yet have such people on board, then call in external consultants from Wayland Systems or one of our competitors. However, don’t become chronically reliant on external consultants, but instead continue to work on building up a pyramid of internal expertise with Stage-6s at the top that will ensure a lasting mastery of Software Engineering.\nD. Learning Latency vs. Lifetime of Technique\nOne manager of a major organization recently complained to me that by the time a critical mass of his people had learned a Software-Engineering technique that technique had been left behind in the mud of obsolescence by the relentless march of progress. Although there is, of course, some truth in this complaint, it is also true that “plus ça change, plus c’est la même chose.” If you buy a power drill to replace a manual drill, the deep principles of drilling will be largely unchanged. Similarly, most new Software-Engineering methods are basically founded on familiar underlying methodological principles (such as the principle of “Safe Deferral” or of “Partitioning to Minimize Interfaces”).\nDevelop a large “capacitance” of Stage-6s in your organization in order to smooth the apparent high-frequency ripples in technology. These people will be able quickly to absorb a new technique and to assess its applicability to the shop’s needs. They will also be able to compare and contrast the new technique to current techniques and to steady the transition from old to new, because many of the new ways of addressing software are simply refinements of ways already known to Stages 3, 4 and 5.\nSome Recommendations\n\nBe aware of the Seven Stages of Expertise and their effects on productivity under a specific Software-Engineering technique. Reconcile your expectations for Software Engineering with the realities of the Seven Stages.\nTake stock of where you are. Have each person assess his stage with respect to each Software-Engineering technique that your shop uses.\nHave each person state their medium- and long-term goals for expertise in each relevant technique and suggest a plan for achieving those goals.\nEstablish similar medium- and long-term goals for the shop as whole. Determine the most appropriate blend of stages for the work that you do and set up a plan to achieve that blend.\nNever attempt a crucial project solely with Stage-3s and below. Seed each project with Stage-4s and allow access to Stage-5s and 6s if possible. If you don’t have a Stage-5, beg, borrow, steal, buy, kidnap… one. External consultants are valuable as a short-term measure.\nStabilize the effects of technological change by nurturing an in-house expertise (Stage-6) in fundamental methodological principles. Try to formulate shop strategies (as much as you can) in non-technological terms. Superimpose technology on to the strategy in order to yield tactics.\nHave a mission that will never go away. For example, the mission of Wayland Systems is “Mastery in Software Engineering.” In other words, we seek to assist our clients in becoming self-sustaining at at least the Stage-6 level of Software Engineering. This mission will not evaporate for many decades yet, for software is becoming ever more complex and ever more critical. There will be much to learn — even for Stage-6s and Stage-7s — as we pass into the new century."
    },
    {
        "url": "/post/sample-post/",
        "title": "Sample post",
        "date": "Thu Dec 15 2022 00:00:00 GMT+0000 (Coordinated Universal Time)",
        "author": "BaHI",
        "image": "",
        "tags": ["posts","samples"],
        "categories": [["Samples"]],
        "summary": "<h1>This is just a <strong>sample</strong></h1>\n",
        "text": "This is just a sample\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Donec porttitor metus non nunc varius, nec fermentum magna sagittis. Ut libero mi, blandit at molestie at, sollicitudin quis magna. Integer quis erat rutrum, euismod augue eu, sodales neque. Nunc vel turpis semper, posuere metus ac, gravida sapien. Mauris at malesuada lorem. Suspendisse dui odio, facilisis ac tempor vitae, porta id ligula. Curabitur rutrum lorem at auctor dignissim. Phasellus nulla sapien, hendrerit at aliquet ac, elementum id massa. Aenean eget metus ullamcorper, convallis diam non, rutrum ligula. Morbi gravida mauris in augue rutrum, non porta lacus suscipit."
    },
    {
        "url": "/hire-me/",
        "title": "Hire me!",
        "date": "Tue Apr 25 2023 10:17:31 GMT+0000 (Coordinated Universal Time)",
        "author": "",
        "image": "",
        "tags": ["www"],
        "categories": [],
        "summary": "<h1 id=\"fractional-cto-%7C-principal-engineer\" tabindex=\"-1\">Fractional CTO | Principal Engineer</h1>\n<img class=\"skip-float-end\" style=\"height: 12em;\" src=\"/hire-me/business card.png\" alt=\"image\" />\n<hr>\n<p>Thank you for reaching out.</p>\n<p><strong>If you checked my <a href=\"https://www.linkedin.com/in/hideghety/\" target=\"_blank\">LinkedIN headline and profile</a></strong>, did a match then it’s without doubt that I am a <strong>suitable</strong> candidate for the position.</p>\n<p>I possess over <strong>20 years of experience</strong> in software <strong>development, architecture and team-leading</strong>, so I’m <strong>interested only in specific roles</strong>.</p>",
        "text": "Fractional CTO | Principal Engineer\n\nThank you for reaching out.\nIf you checked my LinkedIN headline and profile, did a match then it’s without doubt that I am a suitable candidate for the position.\nI possess over 20 years of experience in software development, architecture and team-leading, so I’m interested only in specific roles.\n\nWhat I Do\n\nOn-hand technical leadership\nExpert on .NET and Angular stack\nMake key decisions related to software development and align it to the business strategy\nAct as a liaison between the software development team and other departments\nOverseeing the development process of external vendors and agencies - creating Request for Proposals (RFPs), providing estimations, budgeting and planning for projects…\nSupport in hiring of software talent (design hiring and recruiting plan, write job descriptions)\nMentor existing staff with focus on effective, simple, and easy to comprehend principles\nDefine software development processes, technology stack, coding standards and process\nDefine architecture, oversee the development and maintenance of software systems\nDefine deployment strategy (DevOps)\n\nSpecialities\n\nSoftware development services, with a focus on solid architecture to prevent costly errors and provide long-term low-cost solutions\nAudits and second opinion in software related matters\nProject rescue services (problem finder services)\n\nWe offer fair market rate consulting services on a fractional as well as full-time equivalent basis (40 hours per week). Our rates are competitive with those of a regular employee with similar experience.\nTechnologies\n\n.NET (primary stack), Microsoft SQL, Entity Framework, OData, SignalR, Messaging, Microsoft Azure, IIS 6.5/7\nAngular, TypeScript, NativeScript, Bootstrap, Kendo UI, Syncfusion, DevExpress\nAuth0, Twilio, Hangfire.io, SpreadsheetGear, Viewpoint, Shiftboard\n\nSchedule a Call\nIf all above criteria are met and you like my experience and are considering me, feel free to reserve a time for a call (Zoom) [link].\n\nNOTE: I allowed scheduling without a notice time, so if you plan the call within the upcoming 1-4 hrs, plz. make sure to drop a message on LinkedIn (it’s easy to miss if not planned ahead, and I really would not want to waste your time).\n\nPortfolio / Screenshots\n\nMore images...\n\nImage gallery - Application screenshots\n\nImportant Links\n\nThis URL\n\nBook a free call\nhttps://outlook.office.com/bookwithme/user/d5a694f8ce744191a6220ea32ba4eb22%40simplyput.com?anonymous&amp;isanonymous=true\n\nLinked In\nhttps://www.linkedin.com/in/hideghety/\n\nCV\n[link]\n\nServices\n[link]\n\nSuccess Story\n[link]\n\nProjects\n[link]\n\nconst locationOrigin = window.location.origin;\ndocument.querySelector(\"#this-anchor\").innerText = window.location.href;\ndocument.querySelectorAll(\".anchor-patch\").forEach(a => a.innerText = a.href);"
    },
    {
        "url": "/",
        "title": "Index",
        "date": "Tue Apr 25 2023 10:17:31 GMT+0000 (Coordinated Universal Time)",
        "author": "",
        "image": "",
        "tags": ["www","home"],
        "categories": [],
        "summary": "<!-- Content wrapper (due to AOS.JS we need overflow hidden here) -->\n<div id=\"home\" class=\"overflow-hidden hide-on-search-results-container-display\">\n  <!-- LANDING + HINT -->\n  <div class=\"landing-hints\">\n<pre><code>&lt;!-- ST: LANDING --&gt;&lt;/div&gt;&lt;/div&gt;\n</code></pre>\n",
        "text": "New articles available!\n\nYou don't have to deal with technology on your own!\n\nElevate your business with fractional CTO services.\nRetain equity, reduce expenses, and achieve results.\n\nBuild scalable products with low maintenance costs!\nSTART RIGHT or let us ASSIST YOU in getting things right!\n\nSee how we have rescued and rebuilt the core internal software of a $150 Million Covid Testing and Vaccination company within 2 months!\n\nFind out more about the project!\n\nFractional CTO | Principal Engineer\n\nI take over all the technical matters, make the necessary decisions, and manage people and projects.\n\nEvery company is a tech company.\nEvery company operates technology to support its business processes.\nAccess to technical experts is not a luxury, but a necessity for success.\n\nLet's start the journey to growing your business together.\n\nGet Expert Technology Leadership and Guidance.\nReduce Development Costs and Avoid Project Failures.\nImprove Software Quality and Performance.\n\nBook a free call with me now\nLearn more\n\nAs software becomes more complex and critical, it is important to have at least one Stage-5 candidate on the team from the very start - at any cost!\n\nMeilir Page-Jones in The Seven Stages of Expertise in Software Engineering\n\nAn analysis of 50K software projects conducted by The Standish Group in 2015 found that\n0%%\nof projects were either failures or challenged to meet expectations. The same study in upcoming years revealed the same or even worse data!\n\nOur services\n\nEvery company is a tech company.\nEvery company operates technology to support its business processes.\nHowever, not all companies have the resources or expertise to navigate the complex world of technology on their own.\n\nThis is where a technology leader comes in, someone who can help bridge the gap between business strategy and technical execution.\n\nCan you identify and prevent costly long-term technical decisions in a timely manner?\nAre you able to identify technical issues?\nWhile it may seem simple, sometimes these issues can be difficult to detect and are disguised as demonstrated in \"Six Little Lines of Fail\" by Jimmy Bogard.\n\nThere are other situations where assistance from a technology expert may be necessary:\n\nIf you have an idea, but lack technical expertise\nIf you are starting a new project or are experiencing issues with an ongoing one...\nIf you encounter communication issues with vendors or the development team\nIf you need a fresh perspective to identify and solve issues\nIf your application is experiencing bugs or slow performance\nIf development has slowed down\nIf your team requires coaching or guidance\n\nStrategic Vision\nCreate a long-term roadmap for software development to align with business goals and vision.\n\nTactical Planning\nBreak down the strategic plan into smaller, actionable steps that can be executed by software development teams.\n\nOperational Tasks\nManage day-to-day activities of software development teams to ensure timely delivery of high-quality software products.\n\nCOMING SOON: Is your company technically vulnerable? Take our simple health-check quiz.\nCOMING SOON: Top 10 things non-technical owners should never forget to address.\n\nAbout me\n\nWith more than 20 years of experience in the tech industry, I am dedicated to helping companies bridge the gap between business strategy and technical execution.\nMy mission is simple - to deliver great results that help businesses succeed.\n\nStick to what works and excel as a result - I adhere to established, simple-to-comprehend principles - created by far smarter people than us.\n\nAt the core, I am an engineer, having dedicated the last 20 years of my career to building software.\nWith this wealth of experience, I possess the skills and knowledge necessary to excel technology leadership roles.\nI understand what it takes to succeed in this role and can provide valuable insights and guidance on developing and implementing effective technology strategies.\n\nIf you have any doubts about my passion, I invite you to join me on a call to see for yourself.\n\n21 Years of Experience\n\n&gt; 38 Finished Projects\n\nPrivate and Government Projects\n\nEU and US Companies\n\nFree 1-Hour Consultation\n...to Help Grow Your Business\n\nIn this upcoming session, we will have the opportunity to assess if our services are the perfect fit for your needs, and if we can deliver the level of quality that will help you succeed.\n\nBook a free call with me now!\n\nQuick Audit\nIs Your Business at Risk? Get a Quick Audit to Find Out!\n\nAs a non-technical founder, it's easy to miss important technical aspects.\nDon't let wrong development processes, communication issues, missing documentation, or low-quality code cost you a fortune.\nGet the necessary technical details firsthand with a Quick Audit.\n\nFinding bottlenecks\nSuggesting solutions\nIncreasing productivity\n\nLearn what's broken before it's too late!\n\nCTO as a Service\nAccess to technical expertise when you need it...without the cost of a full-time hire\n\n...and without giving away equity.\n\nSimilar to how a physician conducts regular check-ups , a Fractional CTO on a retainer can provide cost-effective, long-term regular assessments and preventative maintenance to ensure that a business's technology is functioning optimally.\n\nTechnical Strategy and Planning\nTechnical Architecture and Design\nProcess Improvements and Optimizations\nVendor Management\nTechnical Leadership & Mentoring\n\nSoftware Projects can be done RIGHT!\nIt just requires a strategic approach, on-hand technical expertise and diligence.\n\nProject Rescue\nGet Your Project Back on Track Within Months\n\nIs your project experiencing trouble?\nHas development slowed down?\nAre there a high number of bugs that require developers to patch production data, thus preventing new features from being added?\n\nIt's time to identify these issues and start working towards getting things back on track. In some cases, it may only take 1-2 months to see significant improvements. Check out our success stories first!\n\nCheck out our success stories!\n\nSystem Design\n\nFollowing the advice of industry expert Martin Fowler: start small and scale up with your business. Instead of a massive upfront design, I'll provide just enough architecture and planning (internal processes) to ensure seamless continuous growth and visible outputs within months.\n\nBetter boring and stable than shiny but fragile!\n\nEnterprise Software Engineering\n\nSoftware & Technology Selection (requirement gathering, RFP, architecture, estimates, planning)\nSoftware Team Setup & Hiring support\nSoftware Architecture & Development\nVendor Management\nTechnical Leadership\nMentoring\n\nWho we are\n\nWe believe that software projects can be done right!\n\nWe are on a mission to make this happen!\n\nThe distinction between a failed and successful project can often be attributed to small details and the implementation of continuous improvement strategies.\nThis can be achieved through mentoring and providing the necessary tools and resources.\nThis does not require extensive education or constant management.\n\nA fractional leader can provide the hands-on technical guidance and supervision required for success.\n\nWe're different!\n\nWe adhere to established, simple-to-comprehend principles - created by far smarter people than us.\nWe have been doing the same thing every day for the last 20 years, and we know what works...\n\nThat is why we excel.\n\nDon't let your next IT project become a failure.\nOur team has a proven track record of solving software and business problems. Let us help you define, manage, develop and deploy high-quality software that meets your business needs.\n\nContact us today to see how we can help you!\n\n&gt;\n\nProject Hours\n\n&gt;\n\nCompleted Projects\n\nOur Services\n\nYou’re UNIQUE!\nThus the decision to go with a FAANG approach at your company might not work out!\n\nWe Provide Simple and Manageable Solutions...that Works for You!\n\nFractional Leadership | CTO | VP | Director of SWE - As A Service\n\nBecause positive effects do not require full-time employment, only a long-term commitment to continuous improvement.\n\nUnlock the full potential of your business with fractional CTO services.\nWill provide you with tailored solutions for your specific needs, without the commitment of a full-time CTO.\nWe follow and adjust a set of simple guidelines in order to address your specific situation and help you scale at your own pace.\n\nOur approach is to start small and scale up as your business grows (see: Martin Fowler's article on \"Microservices\").\nThis way you can avoid huge upfront design and focus on quality and performance.\nWith our visible outputs within months, you can rest assured that your technology is in good hands, and you can focus on growing your business.\n\nDon't let technology hold you back, let us help you take your business to the next level.\n\nLong-term, cost-effective solution to avoid disasters and effectively manage teams without full-time commitment\nNo huge upfront design! Just enough to avoid future problems.\nStart small and scale! Visible outputs within months!\nSimple, easy to follow guidelines, no nonsense and buzzword recommendations!\n\nBusiness – Non technical\n\nMake key decisions related to software development and align it to the business strategy\nAct as a liaison between the software development team and other departments\nIdentify and implement process improvements to increase efficiency and effectiveness of the software development team and business\nDefine business analysis process for requirements gathering, validation and commitment to work\nCreating RFPs, estimations (budgeting) and planning, overseeing the development process of external vendors (agencies)\n\nHR\n\nSupport in hiring of software talent (design hiring and recruiting plan)\nWrite job descriptions\nMentor existing staff\n\nTechnology and development\n\nSoftware development processes & code audit\nDefine software development processes, technology stack, coding standards and process\nDefine architecture, oversee the development and maintenance of software systems\nDefine deployment strategy (DevOps)\nMentoring\n\nConsulting\n\nSoftware &amp; Technology Selection (requirement gathering, RFP, architecture, estimates, planning)\nSoftware Team Setup &amp; Hiring\nSoftware Architecture &amp; Development\n\nBecause it might be a good idea to get a second opinion.\n\nEnterprise Software Development\n\nOn-Hand Technical Leadership for .NET &amp; Angular\nProject Rescue\nEnterprise Software Development\nMentorship\n\nBeware: having a Stage 6 Lead on your team can lead to more quality, less issues, and non-slowing development.\nWanna risk it?!\n\nQuick Audit\n\nFinding bottlenecks\nSuggesting solutions\nIncreasing productivity\n\nLearn what’s broken!\n\nAs for non-technical managers, some performance and quality related issues may sometimes be difficult to identify.\n\nCase Studies\n\nCovid Testing and Vaccination Company\n\nSaved an internal software project of a $150 Million Covid Testing and Vaccination company [ Impact Health ] from failing in 2022.\nThe same project was then rebranded and sold to another healthcare provider [ Wellness Coaches USA ].\nDespite its complexity (external data, 3rd party synchronisation, SSO, mobile device support) the project is still in use, it requires minimal technical attention and is working without technical intervention for months.\nLink to the detailed success story\n\nWe've made some changes to the software development related business &amp; technological processes, as well as to the tooling to manage the team more effectively.\nWe simplified the UI for optimal experience on desktop and mobile.\nIntroduced technology and implementation to improve resiliency and performance at 3rd party services integration.\nWe've analyzed the data, drawn up KPIs and reports to help minimize payroll and staff-related problems.\n\nSpecialty Service Provider for the Energy Industry\n\nReduced maintenance expenses and minimalized data-discrepancy issues on the company [ Universal Plant Services ] custom hiring applications from a yearly ~$60K to 1/4 with ROI: &lt;12 months.\nIntroduced necessary technologies, tools and processes which lead to more effective development (more things done with less code so less liability), higher data throughput and better end user experience.\nIntroduced the necessary technologies, tools, and processes that lead to more effective development - this includes: more things done with less code so less liability, higher data throughput, and a better end user experience.\n\nIntroduced new technologies &amp; solutions to speed-up development, authored the reusable component libraries for .NET (NuGet) and Angular (NPM).\nContributed new ideas to extend and stabilize the hiring application.\n\nQuick Links\n\nHome\nOur Services\nProjects\n\nLet us Help!\n\nMessage me on Linked In\n\nBook a free call"
    },
    {
        "url": "/projects/",
        "title": "Projects",
        "date": "Tue Apr 25 2023 10:17:31 GMT+0000 (Coordinated Universal Time)",
        "author": "",
        "image": "",
        "tags": ["www"],
        "categories": [],
        "summary": "<h1 id=\"projects\" tabindex=\"-1\">Projects</h1>\n<h2 id=\"impact-health\" tabindex=\"-1\"><img class=\"company-logo\" src=\"/projects/IH/Logo ImpactHealth.png\" alt=\"image\" /> Impact Health</h2>\n<p><a href=\"https://www.impacthealth.com/\">Impact Health</a> is one of the nation’s leading providers of onsite clinical testing, health, wellness, and consultative support for health promotion services.</p>\n<p><a href=\"https://simplyput.com/\">SimplyPut Consulting</a> transformed this $5 Million biometric testing company into <strong>$150 Million Covid Testing and Vaccination company</strong> in two months​! To manage the new workload, <strong>the company changed its internal …</strong></p>",
        "text": "Projects\nImpact Health\nImpact Health is one of the nation’s leading providers of onsite clinical testing, health, wellness, and consultative support for health promotion services.\nSimplyPut Consulting transformed this $5 Million biometric testing company into $150 Million Covid Testing and Vaccination company in two months​! To manage the new workload, the company changed its internal processes. It required custom tools for its team leaders to enable them to administer dispatched staff at off-site testing locations more effectively.\n\nImage gallery - Application screenshots\n\nPrincipal Engineer / Technical Lead\n\n.NET\nAngular\nMicrosoft Azure\nAzure SQL\nShiftboard\nUniversal Plant Services\nUniversal Plant Services, a Jones Industrial Holdings company, is one of North America’s largest comprehensive specialty service providers for the energy industry — providing maintenance, repair and installation services for rotating, fixed, reciprocating and electrical equipment. With headquarters in Houston, Texas, UPS employs 3,000 highly trained individuals with 16 full-service facilities that specialize in daily maintenance, turnarounds and capital projects.\n\nImage gallery - Application screenshots\n\nSenior Software Engineer / Architect\n\n.NET\nAngular\nMicrosoft SQL\nMicrosoft IIS\nMicrosoft Azure\nAzure SQL\nViewpoint\nADP\nTyrian Advisory\nThe company is providing financial services, acting as an insurance broker.\nThey needed an online car insurance comparison portal with the possibility to sign up for insurances. The portal compares different insurance companies and their offers so that the customer can find the best option according to his/her needs.\n\nMore images...\n\nImage gallery - Application screenshots\n\nSenior Software Engineer / Architect\n\n.NET\nMicrosoft SQL\nMicrosoft IIS\n\nThe Public (General) Prosecution of the Slovak Republic\nScanning application with OCR, document anonymization (depersonalization), categorization and auto-publish feature.\n\nImage gallery - Application screenshots\n\nSenior Software Engineer / Architect\n\n.NET\nWinforms"
    },
    {
        "url": "/success-stories/ih-tla/",
        "title": "The Impact Health Success Story",
        "date": "Tue Apr 25 2023 10:17:31 GMT+0000 (Coordinated Universal Time)",
        "author": "",
        "image": "",
        "tags": ["www"],
        "categories": [],
        "summary": "<p>SimplyPut Consulting transformed this $5 Million biometric testing company into <strong>$150 Million Covid Testing and Vaccination company</strong> in two months​!</p>\n<p>To manage the new workload, <strong>the company changed its internal processes</strong>. It required custom tools for its team leaders to enable them to administer dispatched staff at off-site testing locations more effectively.</p>\n<p>**They needed a specific and …</p>\n",
        "text": "SimplyPut Consulting transformed this $5 Million biometric testing company into $150 Million Covid Testing and Vaccination company in two months​!\nTo manage the new workload, the company changed its internal processes. It required custom tools for its team leaders to enable them to administer dispatched staff at off-site testing locations more effectively.\nThey needed a specific and focused view of the data on their subordinates, including timecards, absenteeism, ratings and a way to manipulate these effectively. These data were from a 3rd party system and originally synced Shiftboard via Azure App Logic.\nThe Impact Health Success Story\nMetrics\n\n~2500 monthly events\n\n5K-10K placed staff monthly\n\n~400 active team-leads\n\nScreenshots\n\nMore images...\n\nImage gallery - Application screenshots\n\nInitial problems\nThe initial solution was developed for approx. 4 months was failing, the reasons:\n\nWrong hire (non lead and non mature enough senior developers) resulted in quality issues in the developed product. Missing software related processes made it hard to track progress or to track deployed changes also lead to faulty deployments too (both on .NET and Angular side).\n\nNon-ideal tool selection for synchronization logic - showed as a problem just later on, the functions in Azure Logic App were repetitive, hard to adjust, ignored some architectural characteristics of the platform (rate limiting), and the ineffective (non-batched) coding approach resulted in long synchronization times and sometimes even failing without a trace.\n\nFirst steps we took\n\nStabilized deployment and traceability of work by introducing git-flow, creating CI/CD pipeline in Azure DevOps.\n\nWe fixed architecture, and introduced environment settings in the applications, and defined some routing rules for UI.\n\nStarted to replace the UI screens step-by step. This included changes inside the API (back-end) code.\n\nAt the end of the 2nd month: the entire application was replaced with a new one (redesigned screens, stable functions)\nFrom this moment on we could focus on new enhancements and continuous improvements.\nNew possibilities\nHaving less support tickets (bugs) enabled us to focus on getting the sync process right - we moved from Azure App Logic to a custom but generic .NET function, which we executed periodically via integrating Hangfire.IO to the back-end.\nWe were able to react to new business requirements instantly as time spent on upkeep was reduced considerably. This enabled us new projects and further possibilities.\nFinal state\nThe project is still in use. It requires minimal technical attention and has worked without intervention for over months in a strike."
    },
    {
        "url": "/www/success-stories/",
        "title": "Success stories",
        "date": "Tue Apr 25 2023 10:17:31 GMT+0000 (Coordinated Universal Time)",
        "author": "",
        "image": "",
        "tags": ["www"],
        "categories": [],
        "summary": "<p>Success stories!</p>\n",
        "text": "Success stories!"
    }
]