[{
        "url": "/post/the-critical-choice-picking-the-perfect-cto-archetype-for-your-business-startup/",
        "title": "The Critical Choice - Picking the Perfect CTO Archetype for Your Business / Startup",
        "date": "Mon Oct 30 2023 00:00:00 GMT+0000 (Coordinated Universal Time)",
        "author": "Bal√°zs HIDEGH√âTY",
        "image": "/post/the-critical-choice-picking-the-perfect-cto-archetype-for-your-business-startup/4 CTO archetypes.jpeg",
        "tags": ["posts","startup","SME","CEO","founder","entrepreneurship","team-setup","softwareengineering"],
        "categories": [["CTO"]],
        "summary": "<!-- # The Critical Choice - Picking the Perfect CTO Archetype for Your Business / Startup -->\n<p><strong>In a world where exceptional technical leadership can make or break a company, it's essential to consider the role of a Chief Technology Officer (CTO) with utmost care.</strong></p>\n<p>Selecting the right CTO is a critical decision, one that can significantly impact your business at its current stage and align with the existing roles within your engineering team. The wrong choice can lead to friction, ‚Ä¶</p>\n",
        "text": "In a world where exceptional technical leadership can make or break a company, it‚Äôs essential to consider the role of a Chief Technology Officer (CTO) with utmost care.\nSelecting the right CTO is a critical decision, one that can significantly impact your business at its current stage and align with the existing roles within your engineering team. The wrong choice can lead to friction, inefficiencies, and unnecessary expenses, while the right one can act as an enabler, streamlining processes, and facilitating seamless future development without additional sacrifices.\nHere‚Äôs the good news: you don‚Äôt always need a full-time CTO (and deep pockets) to get the tech expertise you need. Clear up some common misconceptions, match your CTO to your business, and watch it thrive.\n\nCommon misconceptions\nBefore we delve into the four CTO types and how they align with different company stages and the roles they encompass (all of which influence the CTO‚Äôs responsibilities), let‚Äôs dispel some myths surrounding the role of a technical expert:\n\nHiring a great CTO based solely on offering equity - This is a flawed approach with significant long-term downsides (see. The Equity Fallacy).\nBelieving that a senior lead, or even worse, a project manager with basic SQL and web app experience, can replace a technical lead - The harsh reality is that the technical expertise required by non-technical companies is measured in decades, not merely years!\nHiring a CTO without taking into account the four CTO archetypes.\n\nThe 4 CTO Archetypes\nIt‚Äôs incredibly frustrating to be part of a team that lacks clear technical guidance, hindering effective communication, making poor technical decisions, and offering no opportunities for career development or mentorship.\nWhen selecting the right CTO, it‚Äôs crucial to consider your team‚Äôs needs and existing roles; otherwise, you compromise quality and critical company cultural aspects, ultimately leading to morale, burnout, and retention issues, which will result in additional costs.\n1Ô∏è‚É£ The Architect CTO\nThe Architect CTO, a technology expert, holds responsibilities in architectural design, critical building blocks, engineering streamlining, and vendor relationship management (buy-in vs build). The impact of this role is substantial, with a lasting influence on the company‚Äôs technology platform.\n2Ô∏è‚É£ The People Leader CTO\n‚Ä¶shapes the technical culture, handles hiring, and manages the team. In later stages, their role becomes similar to that of a VP of Engineering, with a focus on career development and team growth.\n3Ô∏è‚É£ Marketing and Customer Facing CTO\nThe Marketing CTO actively engages with customers, demonstrating technical expertise, which not only boosts sales but also serves as a magnet for top talent and premium vendors. Their efforts showcase the company‚Äôs strengths and capabilities, fostering growth and success.\n4Ô∏è‚É£ R&amp;D (visionary) CTO\nThis role goes beyond coding, emphasizing strategic thinking about technology and industry evolution. They excel at spotting the next big product opportunity and guiding the company, even during challenging times. Their role is critical in driving company reinvention.\nThe 4 Stages of a Company\nNow that we‚Äôve explored the four CTO archetypes, let‚Äôs delve into the typical stages that a company goes through. Understanding these stages is crucial because most of the significant changes happen between these phases.\n1Ô∏è‚É£ Idea Stage (Market Validation)\nüåü This is where you validate your business idea and discover the right problem-to-solution fit. You expand your concept, conduct market tests, gather insights from experts and potential customers, collaborate with vendors, and begin translating your business requirements into technical ones. During this phase, low-code solutions and Minimum Viable Products (MVPs) often come into play.\n2Ô∏è‚É£ Launch Phase\nüöÄ Now, you transform your idea into a real, stable, and scalable solution, launching it to a broader audience. Measuring results, user experience, and usage becomes crucial. You might need to consider team expansion as you plan for growth.\n3Ô∏è‚É£ Growth Stage\nüå± This stage is all about generating consistent revenue and expanding your user base. You‚Äôll be balancing the acquisition of new customers, managing your revenue, and adapting your product or service to meet new user demands.\n4Ô∏è‚É£ Maturity Stage (Visionary)\nüëÅÔ∏è In the maturity stage, your company should actively seek new opportunities for expansion. This might involve building localized teams, exploring acquisitions, investing in team development, and discovering new growth channels. It‚Äôs crucial to stay focused on your core strengths and keep a close eye on the market for ongoing success.\nPutting the Pieces Together\nIn the Idea and Launch Stages, the team is relatively small, but this is where technical foundations are laid. Both of these phases require a technical CTO with an architectural focus. However, as the team grows (through hiring and managing people), the Launch Stage must not lack a personally focused CTO.\nIn the Growth Stage, a more seasoned CTO with a personal focus is required, someone who can manage managers. Besides that archetype, a marketing-focused CTO skillset becomes valuable at this stage.\nOnce the Maturity Stage is reached, most of the former CTO tasks are delegated to other leaders (such as technical leads, VPEs, and CMOs). Here, the CTO must think beyond code, focusing on technology and anticipating industry changes to prevent business disruption and react effectively.\nSummary\nIn the startup journey, the early stages serve as the foundation for future success. It‚Äôs essential to establish strong technical foundations that create long-term value, laying the groundwork for sustainable growth. Initiating these phases without the technical CTO archetype is likely to disrupt this success path.\nIn closing, it‚Äôs crucial to keep one additional thing in mind when it comes to the CTO role: it is inherently strategic, with a primary focus on long-term value creation. This strategic nature can, at times, create friction with short-term operational goals, resulting in conflicts of interest with roles on the operational team. Because of this conflict of interest, to make the best use of your CTO, it‚Äôs advisable to avoid assigning operational tasks to them. This approach will help ensure that the CTO‚Äôs strategic vision can contribute effectively to the long-term growth and value of your company / startup."
    },{
        "url": "/post/the-equity-fallacy/",
        "title": "The Equity Fallacy",
        "date": "Mon Nov 06 2023 00:00:00 GMT+0000 (Coordinated Universal Time)",
        "author": "Bal√°zs HIDEGH√âTY",
        "image": "/post/the-equity-fallacy/the equity fallacy.jpeg",
        "tags": ["posts","startup","SME","CEO","founder","entrepreneurship","team-setup","softwareengineering"],
        "categories": [["CTO"]],
        "summary": "<p>In the fast-paced world of startups, the journey to success is fraught with uncertainties. Startling statistics reveal that <strong>only a mere 1% of startups manage to reach the coveted IPO stage</strong>, with a significant number meeting their demise within the initial five years[^1].</p>\n<p>The idea of working for equity alone is a double-edged sword, raising questions about the feasibility and motivations of ‚Ä¶</p>\n",
        "text": "In the fast-paced world of startups, the journey to success is fraught with uncertainties. Startling statistics reveal that only a mere 1% of startups manage to reach the coveted IPO stage, with a significant number meeting their demise within the initial five years[1].\nThe idea of working for equity alone is a double-edged sword, raising questions about the feasibility and motivations of those with extensive technical expertise considering this path.\n\nBut why this pervasive skepticism? Let‚Äôs delve into the diverse personas you might encounter when contemplating equity-only arrangements.\n1Ô∏è‚É£ Imagine you are a seasoned expert with over two decades of experience, bearing substantial responsibilities, and a family to support. Why would you even contemplate, let alone afford, the notion of working solely for equity?\n2Ô∏è‚É£ Conversely, a student or junior professional with only a few years of experience might be enticed by the prospect of becoming a CTO. However, such limited expertise might fall short of meeting the standards for a technical leader. Would you feel confident investing in a product guided by such a newcomer?\n3Ô∏è‚É£ Perhaps you hope to find an individual with ample passive income? In that case, consider this: Why would such a person not prefer to establish their own venture?\nEquity-only offers come with a considerable risk ‚Äì the technical co-founder you secure may either abandon the project halfway through, or in unfortunate cases, remain until they‚Äôve secured their full equity without delivering substantial value, leaving a trail of low-quality work behind.\nSo, what alternatives do you have?\nDiscovering skilled individuals to handle operational aspects at a lower cost than a technical co-founder is feasible. You don‚Äôt necessarily require a full-time CTO to optimize the technical facets. Initially, what you need is someone to establish processes, carry out regular check-ups, and provide valuable advisory and mentorship.\nThe good news? Finding such individuals is easier than you might think; simply look for the term ‚ÄòFRACTIONAL!‚Äô\n\n40-70% of startups fail within the first 5 years. ‚Ü©Ô∏é"
    },{
        "url": "/post/the-seven-stages-of-expertise-in-software-engineering/",
        "title": "The Seven Stages of Expertise in Software Engineering",
        "date": "Tue Apr 25 2023 00:00:00 GMT+0000 (Coordinated Universal Time)",
        "author": "Meilir Page-Jones | Bal√°zs HIDEGH√âTY",
        "image": "/post/the-seven-stages-of-expertise-in-software-engineering/7 stages.jpg",
        "tags": ["posts","HR","classification","startups","team-setup","avoid-failures","entrepreneur","SME"],
        "categories": [["HR","Classification"]],
        "summary": "<p>This article is still <strong>relevant for any startup or company involved in software development</strong>. It contains useful informations - just like &quot;Clean Code&quot; by Robert C Martin - <strong>details within this article are timeless</strong>.</p>\n<p>I first came across this article around 2016, when I noticed a large <strong>disparity between the usual junior-mid-senior scaling</strong> of developers. This scaling system, unlike ‚Ä¶</p>\n",
        "text": "This article is still relevant for any startup or company involved in software development. It contains useful informations - just like ‚ÄúClean Code‚Äù by Robert C Martin - details within this article are timeless.\nI first came across this article around 2016, when I noticed a large disparity between the usual junior-mid-senior scaling of developers. This scaling system, unlike others, is universal, easy to understand, and the bear hunting analogy used in the original article by Meilir Page-Jones makes it a humorous and enjoyable read.\nSince then, the original page has been taken down (an archive can be found here). With the permission of the author, I am allowed to distribute the original article.\nI made some slight changes by adding additional titles and styling. Since there is more behind the seven stages, it is likely to be referenced frequently.\nWe hope you enjoy reading this article and that it helps your next projects be successful.\n\nThe Seven Stages of Expertise in SWE\nMeilir Page-Jones ¬© Copyright 1998, Wayland Systems Inc. All rights reserved.\n(In this article, an indefinite ‚Äúhe‚Äù means ‚Äúhe or she‚Äù.)\nIntro\nFor almost two decades we at Wayland Systems Inc. have toiled to transfer the latest developments in software engineering to practitioners at large and small companies around the world. However, until recently we didn‚Äôt do a very good job of quantifying the long-term field results of our efforts. So we decided to ask a question reminiscent of the rhetoric of Ed Koch (the former mayor of New York City): ‚ÄúHow‚Äôre we doin‚Äô?‚Äù\nWe surveyed some of our clients to whom we‚Äôd provided education and consulting over the years and discovered an interesting but very disturbing fact. Over 50% of the shops into which we‚Äôd introduced Software Engineering techniques had either abandoned the use of the techniques or had let their band of active practitioners shrink to a dwindling core of diehards. What was going wrong here?\nWe turned to self-examination and reviewed our courses and consulting practices. But, whatever the problem was, it didn‚Äôt seem limited to Wayland Systems: Informal discussions with our competitors revealed that they too were having similar problems. The attrition rate across our whole industry was painfully high.\nFactors Affecting Productivity\nExternal examination revealed several factors at work, many of which were to do with corporate management habits. Examples of these were:\n\nunrealistic management expectations\na lack of commitment to quality\nan obsession with coding (which we termed WIMP ‚Äî ‚ÄúWhy isn‚Äôt Marvin Programming?‚Äù ‚Äî management)\npernicious deadlines\nand a misallocation of skills to tasks\n\nOther factors included: engineers‚Äô resistance to change; engineers‚Äô reluctance to participate in team approaches; and the then-unavailability of useful CASE tools.\nThe above factors were significant and worthy of articles in their own right. However, there was another factor, which is more important and fundamental than the others. This factor is the way that people are able to absorb sophisticated new techniques and then to apply them to their work ‚Äî in other words the stages of expertise through which we all pass as we learn and use new and powerful disciplines.\nAt first we were aware only that there were two types of person: novice and expert. That was hardly earth-shattering news. However, further research revealed that there are actually seven stages of expertise through which a person may pass on the journey from total ignorance to world-class knowledge. With devastating acumen we numbered these seven stages Stages 1 through 7. (We also gave them names: Innocent, Exposed, Apprentice, Practitioner, Journeyman, Master and Expert.) As I‚Äôll discuss below, these seven stages have a deep impact on the successful ‚Äî or otherwise ‚Äî introduction of software engineering into an organization.\nA participant at a conference asked me how universal these seven stages are.\n\n‚ÄúVery universal,‚Äù I answered.\n‚ÄúYou mean that I could even apply them to the skill of bear-hunting?‚Äù he retorted unexpectedly.\n‚ÄúYes,‚Äù I said.\n\nSo, if you‚Äôll bear with me, I should like to illustrate the Seven Stages of Expertise with reference to hunting (although I‚Äôm most definitely not a fan of such an activity). Following that illustration I‚Äôll outline the application of the Seven Stages to our own business of Software Engineering.\nThe 7 Stages in Bear-Hunting\nStage 1: Innocent\n‚Äî A Stage-1 person has never seen or heard of bears. It would not occur to a Stage-1, if he encountered a bear, that the bear could be hunted. Neither would he realize that a bear is a potential source of danger.\nStage 2: Exposed\n‚Äî A Stage-2 person has seen an occasional bear and has read articles in airline magazines suggesting that bears may be hunted. Moreover, a Stage-2 probably has friends that have hunted bears and has learned some desultory but intriguing facts about bears and their habits. He is motivated to learn more.\nStage 3: Apprentice\n‚Äî A Stage-3 has attended a 5-day seminar on bear hunting. During this seminar, the participants form into teams of three or four and practice hunting very small bears under the ever-watchful eye of the instructor. After a few interim setbacks, by Friday afternoon all the teams have successfully hunted their bears. They fill out evaluation forms attesting that ‚Äúbear hunting is very useful and relevant to my job.‚Äù However, they are barely prepared for the world of real bears.\nStage 4: Practitioner\n‚Äî The Stage-4, having completed formal bear-hunting education, is full of confidence. He‚Äôs ready to transcend the minuscule bears of the 5-day workshop and go out for real bears, larger bears, fierce bears. He‚Äôs ready for Ursa Major. His manager is also keen to send him out with the latest bear-hunting techniques because the users want fur and they want it yesterday. Unfortunately, in the resulting scramble the budding bear hunter may be sent out without a map and with the wrong calibre arrow in his longbow. In the heat of ursine confrontation, the Stage-4 may also forget or misinterpret his classroom instruction and precipitate disaster. It‚Äôs typical that some Stage-4s get some bears; but it‚Äôs also typical that some bears get some Stage-4s.\nStage 5: Journeyman\n‚Äî The Stage-5 has survived the traumas of Stage-4 and has bear hunting down cold. The Stage-5 uses modern bear-hunting techniques naturally and automatically; in fact, he can‚Äôt imagine how he ever got along without them. He is accurate and productive: The Steering Committee merely points out the bear and he hunts it within both budget and deadline. The Stage-5 is the exemplary modern hunter that salespeople of bear-hunting seminars refer to in their brochures.\nStage 6: Master\n‚Äî Stage-6 bear hunters have internalised not only the mechanics of bear hunting but also the principles underlying the techniques. Stage-6s know more than rules: They know why the rules exist and even when it‚Äôs permissible to break them. For example, a Stage-3 or 4 may stand upwind of a bear accidentally and scare off the bear. However, a Stage-6 may know that by wearing Yogi-Spray Deodorant he can stand upwind without being detected and can thus surprise the bear from an unexpected quarter. Because of their deep knowledge, Stage-6s are very capable of training others in hunting techniques.\nStage 7: Researcher\n‚Äî Stage-7s are asked to write books and give talks at bear-hunting user groups. They are also engaged in extending and generalizing bear-hunting techniques to solve new problems. For example, a Stage-7 may extend bear hunting to work also on Big Foot or he may even develop the ultimate Yeti-Oriented Hunting Methodology.\nThe 7 Stages in SWE\nNow let‚Äôs come back to the world of software engineering and see how the Seven Stages of Expertise apply to us.\nStage 1: Innocent\nA Stage-1 may not have heard of Software-Engineering techniques. Or ‚Äî more likely nowadays ‚Äî he may be vaguely aware of their existence but may not see their possible relevance to his situation. Indeed, he may be only dimly aware that there are any software-development problems in his shop. You may find it incredible that Stage-1s could exist in the 1990s, but they do. And the reason stems from the way in which software complexity evolved.\nSoftware became insidiously more and more complex in the 1970s and 1980s as users demanded more and more sophisticated systems be installed on the more and more powerful hardware that became available. Yet there was no sharp transition. The earth was not hit by a Complexity Asteroid in 1975 that suddenly made software three orders of magnitude more complex and cast our reptilian development techniques into extinction.\nI call the way in which software complexity actually increased ‚ÄúFrog in the Pan.‚Äù This is because although a frog will jump out of a pan of hot water, a frog that is placed in a pan of cold water and slowly heated will fail to leap forth and will actually boil to death. The temperature gradient is so gradual that there will never be a point at which the frog declares: ‚ÄúBoy, it‚Äôs suddenly gotten hot in here! I think I should hop out.‚Äù (Before I get into deeper trouble from animal-rights folks, I hasten to add that this analogy is apocryphal. I‚Äôve never tried the experiment and I don‚Äôt recommend that you do so either!)\nMany Stage-1s are experiencing ‚ÄúFrog in the Pan‚Äù and are trying to tackle problems of the 1990s with approaches of the 1960s and 1970s, without realizing that the problems they‚Äôre facing are the very ones that modern Software-Engineering techniques were created to alleviate.\nStage 2: Exposed\nStage-2s have noticed that the water is getting decidedly warm, if not downright hot. So they are actively seeking Software-Engineering techniques that will get them out of the pan or at least reduce the heat. Stage-2s may survey magazines, confer with colleagues or attend one-day overviews of the techniques. Their interest level is high but their knowledge level is low, being limited to a few terms and definitions and not based on any practical Software-Engineering experience.\nStage 3: Apprentice\nStage-3s have attended one or two 5-day workshops on Software-Engineering techniques. In these workshops they tackled small but realistic case studies that resembled their own projects in miniature. The case studies provided valuable kinaesthetic reinforcement of the formal lecture material and were thus indispensable. However, the case studies‚Äô apparent realism conveyed to the Stage-3 a confidence that is often unwarranted.\nIf a Stage-3 absorbs everything from a seminar, then he is minimally equipped to tackle a true, full-sized project in the corporate jungle. Usually, however, a Stage-3 does not grasp everything or has difficulty scaling the techniques up from a case study to a real project. You could say that most Stage-3s know just enough to be dangerous!\nStage 4: Practitioner\nThe rite of passage to Stage-4 is the use of Software-Engineering techniques on at least one significant project. Achieving ‚ÄúStage-4-hood‚Äù is for many people the most difficult transition of the six transitions between stages. The fledgling Stage-4 is asked to take untried (by him) techniques and apply them to a corporate project with the usual demonic cocktail of politics, deadlines and changing requirements. At the same time, he is attempting to recall what he learned in class and scale up the examples 10- or 100-fold. He continually needs consulting advice, without which he will encounter a series of minor setbacks or major failures. Since many people throw up their hands at this point and revert to their old mediocre but familiar ways, a large proportion of Stage-3s never make it to Stage-4. If an entire project is peopled with Stage-3s, then it‚Äôs highly likely that the project itself will fail and the Software-Engineering techniques will be publicly pilloried and then abandoned.\nStage 5: Journeyman\nStage-5s have made it. Their experience of Software Engineering is ‚Äúlatched‚Äù in place and there is little risk of their reverting to the past. In the Stage-5 the Software Engineering techniques yield for the first time the productivity the marketing folks promised; and on each successive project a Stage-5 further hones his skill and enhances his productivity. A Stage-5 is self-sufficient - more often the source of Software-Engineering advice than its recipient.\nStage 6: Master\nThe Stage-6 not only is an adept technician, but also possesses a profound methodological foundation. Beyond the ‚Äúwhats‚Äù and ‚Äúhows‚Äù, the Stage-6 knows the ‚Äúwhys‚Äù of Software Engineering. This depth allows him sometimes to break a surface rule, while adhering to a more fundamental methodological principle. The Stage-6 is a good instructor because his theoretical and practical knowledge give him the wherewithal to tackle difficult student questions.\nStage 7: Researcher\nThe Stage-7 is concerned with delivering the latest developments in Software Engineering to a wider audience, via books, articles and conference appearances. The Stage-7 looks out for flaws in contemporary Software-Engineering techniques and for consequent ways to improve the techniques. He also scans the horizon for new problems towards whose solution Software Engineering can be extended and generalized. The Stage-7 is at a methodological pinnacle.\nBehind the Seven Stages (Productivity, Starting Projects, ‚Ä¶)\nThese Seven Stages of Expertise are valuable in their own right. You might think about a Software-Engineering technique that you know and consider which of the stages you are in with respect to that technique. You may also decide what (if anything) you should do to progress to the next stage.\nHowever, there are organizational implications behind the Seven Stages. Below I discuss four of these:\n\nThe Productivity Curve\nPilot Projects\nThe Critical Consulting Core and Ephemeral Technology.\n\nA. The Productivity Curve\nVendors who sell Software-Engineering techniques do so by convincing management of their boon to productivity. Although vendors rarely say so explicitly ‚Äî we at Wayland Systems never used to ‚Äî they compare the productivity of Stage-5s to that of Stage-2s. Unfortunately, this presentation (see Fig. 1) is not a complete picture. Between Stage-3 and Stage-4 there‚Äôs a hair-raising ‚ÄúJ-curve‚Äù of productivity (see Fig. 2), which represents the difficult rite of passage of the incipient Stage-4.\n\nFig. 1 - The productivity curve as perceived by managers\n\nFig. 2 - The actual productivity curve as observed in reality\n\nThis J-curve has led more than one manager to abandon all hope in Software-Engineering techniques. Such a manager is not merely impatient; no one warned him of the J-curve and so when it manifests itself he can only assume that the much-touted Software-Engineering techniques were mere hokum.\nA couple of our clients measured the length of time from Stages 3 to 5. Depending on the individual person, Stage-3 to Stage-4 took 6 to 18 months (about the length of a project or phase) and Stage-4 to Stage-5 took 18 to 36 months. (These times are very approximate because of the subjective nature of the stages.) Except for a few outstanding people, the shortest time from Software-Engineering seminar to exquisite software productivity is 24 months. When managers tell me: ‚ÄúWe just can‚Äôt wait that long,‚Äù I retort: ‚ÄúThe 2 years will pass anyway, whether you do anything or not. Act now!‚Äù\n(By the way, notice that Stage-7s have lower project productivity than Stage-6s. This is because a portion of Stage-7s‚Äô energy is directed away from the specific project and towards general methodological research.)\nB. Pilot Projects\nBut the J-curve has a facet nastier than simple delay in productivity. This is the ‚ÄúWho will bell the cat?‚Äù problem. In the fable of that title, a group of mice that‚Äôd been persecuted by a cat decided to hang a bell around the cat‚Äôs neck that would warn them of its approach. All agreed that this was a wonderful idea ‚Ä¶ but there was one minor difficulty: None of the mice wanted to be the one to risk walking up to the sleeping cat to tie a bell around its neck. This impasse is known formally as the Technology Trap.\nMost project managers would agree that Software-Engineering techniques are a Good Thing. But which of them with bone-crushing deadlines and axe-wielding users wants to be the first to experience the depths of the J-curve. (Me neither!) Thus many shopfuls of intelligent people appear to be dinosaurs because the Technology Trap holds them in the 1970s.\nIf ‚Äúwho will bell the cat?‚Äù is a problem, then I recommend that you try Software-Engineering techniques on a pilot project first. The pilot will uncover all manner of pitfalls that occur during the Stage-3/4 transition as well as problems in the techniques themselves. The pilot should be short (6 months) and should yield a non-critical system. You should learn as much as you can about applying the new technology from the pilot project; this is one project where the learning experience is more important than the end product.\nA pilot project will not eliminate J-curves on subsequent projects. People will still have to go from Stage-3 to Stage-4. But the pilot will make future J-curves shallower, as some causes of the curve‚Äôs nadir are removed. Indeed, although the delivered system is the most important product of most projects, you should never forget the learning by-product of every project. Review what you discovered about doing projects when you complete each project and share that information with others. In that sense, treat every project as a pilot.\nC. Core of Internal / External Consultants\nOne of the surest recipes for disaster is to staff a project with only Stage-3s. Yet many managers do exactly that, pushing a group of analysts through a seminar one week and letting them loose on a crucial project the next week. (Jerry Weinberg refers to this as the ‚ÄúSheep Dip‚Äù approach.)\nEvery project should have access to a Stage-5, or - better still ‚Äî have a Stage-5 on the project team. Cultivate your own Stage-5s and Stage-6s in-house as part of your long-term staff-development policy and make them available to project teams. If you don‚Äôt yet have such people on board, then call in external consultants from Wayland Systems or one of our competitors. However, don‚Äôt become chronically reliant on external consultants, but instead continue to work on building up a pyramid of internal expertise with Stage-6s at the top that will ensure a lasting mastery of Software Engineering.\nD. Learning Latency vs. Lifetime of Technique\nOne manager of a major organization recently complained to me that by the time a critical mass of his people had learned a Software-Engineering technique that technique had been left behind in the mud of obsolescence by the relentless march of progress. Although there is, of course, some truth in this complaint, it is also true that ‚Äúplus √ßa change, plus c‚Äôest la m√™me chose.‚Äù If you buy a power drill to replace a manual drill, the deep principles of drilling will be largely unchanged. Similarly, most new Software-Engineering methods are basically founded on familiar underlying methodological principles (such as the principle of ‚ÄúSafe Deferral‚Äù or of ‚ÄúPartitioning to Minimize Interfaces‚Äù).\nDevelop a large ‚Äúcapacitance‚Äù of Stage-6s in your organization in order to smooth the apparent high-frequency ripples in technology. These people will be able quickly to absorb a new technique and to assess its applicability to the shop‚Äôs needs. They will also be able to compare and contrast the new technique to current techniques and to steady the transition from old to new, because many of the new ways of addressing software are simply refinements of ways already known to Stages 3, 4 and 5.\nSome Recommendations\n\nBe aware of the Seven Stages of Expertise and their effects on productivity under a specific Software-Engineering technique. Reconcile your expectations for Software Engineering with the realities of the Seven Stages.\nTake stock of where you are. Have each person assess his stage with respect to each Software-Engineering technique that your shop uses.\nHave each person state their medium- and long-term goals for expertise in each relevant technique and suggest a plan for achieving those goals.\nEstablish similar medium- and long-term goals for the shop as whole. Determine the most appropriate blend of stages for the work that you do and set up a plan to achieve that blend.\nNever attempt a crucial project solely with Stage-3s and below. Seed each project with Stage-4s and allow access to Stage-5s and 6s if possible. If you don‚Äôt have a Stage-5, beg, borrow, steal, buy, kidnap‚Ä¶ one. External consultants are valuable as a short-term measure.\nStabilize the effects of technological change by nurturing an in-house expertise (Stage-6) in fundamental methodological principles. Try to formulate shop strategies (as much as you can) in non-technological terms. Superimpose technology on to the strategy in order to yield tactics.\nHave a mission that will never go away. For example, the mission of Wayland Systems is ‚ÄúMastery in Software Engineering.‚Äù In other words, we seek to assist our clients in becoming self-sustaining at at least the Stage-6 level of Software Engineering. This mission will not evaporate for many decades yet, for software is becoming ever more complex and ever more critical. There will be much to learn ‚Äî even for Stage-6s and Stage-7s ‚Äî as we pass into the new century."
    },{
        "url": "/post/sample-post/",
        "title": "Sample post",
        "date": "Thu Dec 15 2022 00:00:00 GMT+0000 (Coordinated Universal Time)",
        "author": "BaHI",
        "image": "",
        "tags": ["posts","samples"],
        "categories": [["Samples"]],
        "summary": "<h1>This is just a <strong>sample</strong></h1>\n",
        "text": "This is just a sample\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Donec porttitor metus non nunc varius, nec fermentum magna sagittis. Ut libero mi, blandit at molestie at, sollicitudin quis magna. Integer quis erat rutrum, euismod augue eu, sodales neque. Nunc vel turpis semper, posuere metus ac, gravida sapien. Mauris at malesuada lorem. Suspendisse dui odio, facilisis ac tempor vitae, porta id ligula. Curabitur rutrum lorem at auctor dignissim. Phasellus nulla sapien, hendrerit at aliquet ac, elementum id massa. Aenean eget metus ullamcorper, convallis diam non, rutrum ligula. Morbi gravida mauris in augue rutrum, non porta lacus suscipit."
    }
]