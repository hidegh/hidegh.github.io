[{
        "url": "/post/scaling-secrets-10-tips-every-ceo-should-know-before-resorting-to-microservices/",
        "title": "Scaling Secrets - 10 Tips Every CEO Should Know Before Resorting to Microservices",
        "date": "Thu Jan 25 2024 00:00:00 GMT+0000 (Coordinated Universal Time)",
        "author": "Bal√°zs HIDEGH√âTY",
        "image": "/post/scaling-secrets-10-tips-every-ceo-should-know-before-resorting-to-microservices/scaling and microservices.jpg",
        "tags": ["posts","scaling","microservices","startups","SMEs","CEOs","founders","entrepreneurship","softwareengineering","management","techlead","teamlead","developers"],
        "categories": [["CTO"],["CEO"]],
        "summary": "<p>In the fast-paced world of tech, CEOs, and Founders, please listen up! <strong>Scaling your startup doesn't always demand complex solutions.</strong></p>\n<p>In fact, simplicity is the key. *** Before diving into the microservices abyss, consider these <strong>10 tips for scalable success</strong>‚Äîsome are indeed <strong>cost-effective</strong>!</p>\n",
        "text": "In the fast-paced world of tech, CEOs, and Founders, please listen up! Scaling your startup doesn‚Äôt always demand complex solutions.\nIn fact, simplicity is the key. *** Before diving into the microservices abyss, consider these 10 tips for scalable success‚Äîsome are indeed cost-effective!\n\nPremature scaling is a sin.\n‚ÄúIt must scale well‚Äù\n‚ÄúHiring for a Tech Lead to rebuild our system into microservices‚Äù\nSound familiar?\nThese phrases might be leading you down a costly road.\n\nA well-designed system can handle 10K users without a sledgehammer approach.\n\nRemember, the key lies in strategic planning and efficient streamlining!\n\nMicroservices should probably be the last resort to try to scale because there are at least two or three other reasons that prevent you from scaling. It‚Äôs likely that those same reasons will hinder your costly microservices from working correctly as well.\n\n*** Before diving into the microservices abyss, consider these 10 tips for scalable success‚Äîsome are indeed cost-effective!\n\nThe nice thing about these techniques is, that some of them does not need any change in the code, while others require planning and specific approach at development.\n\nAnyhow, here‚Äôs my list, in the parenthesis there‚Äôs a guess on how hard/costly it is to implement the given solution:\nTop 10 Scaling options\n1Ô∏è‚É£ Scale Up (1)\nSimply throw more hardware at the problem. If you already have a working solution, scaling up (vertically) is the simplest way to address scalability issues, especially in the cloud. You don‚Äôt need to optimize your application or its queries; you can avoid even rewriting it.\nHowever, scaling up won‚Äôt work forever due to two primary reasons: costs and usually limitations/bottlenecks elsewhere (such as within SQL databases).\n2Ô∏è‚É£ CDN (1)\nBy offloading the delivery of static content to CDN servers, you can significantly reduce the load on the origin server (MVC, SPA).\n3Ô∏è‚É£ Database Scaling (4)\nSimilar to scaling up, this method involves a one-time setup and requires some investment. Adding read replicas, utilizing SQL Gateways can eliminate one of the most common scalability bottlenecks: the database.\n4Ô∏è‚É£ Optimizing Database (6)\nScaling databases through the optimization of keys, indexes, and queries may require some effort, but it can lead to significant performance improvements.\nFun fact: Azure MSSQL and modern database solutions can provide valuable suggestions for enhancements - however, having an expert to properly model data can be even more beneficial.\n5Ô∏è‚É£ Scale Out (1)\nScaling out (using multiple instances, employing load balancers) is another approach to enhance your app‚Äôs performance.\nHowever, there‚Äôs a caveat: scaling out is not suitable for every scenario - stateful applications (those that rely heavily on shared state) cannot be easily scaled out.\n6Ô∏è‚É£ Optimize App (6)\nBegin by optimizing the existing application for improved performance. Identify and address performance bottlenecks. In today‚Äôs context, given the widespread use of object-relational mappers (ORMs), I recommend starting by analyzing the queries sent to the database, with special attention to addressing the common N+1 loading issue, consider optimizing queries and creating views for typical relations, and ensure that a database expert handles the necessary optimizations within the database.\n7Ô∏è‚É£ Split the App into 2 (8)\nDividing the application into two parts requires careful planning but can be a manageable step towards scalability. A common starting point is to shift recurring jobs, report generation, and any other long-running processes to a separate instance. You can leverage a straightforward tool like Hangfire.IO in .NET for fire-and-forget processing or utilize a message bus framework like MassTransit for standard distributed processing, especially when bidirectional communication is needed.\nNOTE: This doesn‚Äôt constitute microservices yet; the two application parts can coexist in a single solution and maintain strong cohesion.\n8Ô∏è‚É£ Caching (3-7)\nImplementing caching strategies can be relatively straightforward and provide immediate performance improvements.\nHowever, caching can present challenges when scaling out (distributed caching). But caching itself, if done incorrectly, can lead to excessive memory consumption and can reintroduce a significant load on the database and/or fail to provide sufficient advancements.\n9Ô∏è‚É£ SPA (4)\nDeveloping a Single-Page Application (SPA) can enhance the user experience and even performance with less effort compared to other architectural changes.\nüîü PWA (1)\nBy transitioning your SPA to a Progressive Web App (PWA), you gain additional features, including offline functionality, push notifications, and the ability to install the app on the user‚Äôs home screen. However, you also reduce the load on your servers (especially if you used frameworks to develop your SPA, which can bloat the solution with excess bytes).\nSummary\nAs you can see, we explored 10 options before arriving at:\n\nUI Composition\nMicro Frontends\nMicro Services\n\nAs we‚Äôve discovered, determining the most suitable scaling approach for your application requires careful consideration of various factors, including your business needs, application state, user growth projections, and budgetary constraints.\nWhile simpler methods like scale-up and CDNs often provide initial relief, more advanced techniques such as database scaling, optimizing queries, and dividing the application into smaller components can offer long-term scalability and resilience.\nUltimately, the decision lies in carefully evaluating your specific requirements and seeking guidance from experienced technical experts to ensure the most effective and cost-efficient scaling strategy for your application‚Äôs continued growth and success.\n\nüí¨ Any thoughts?\n\nJoin the conversation on LinkedIn. Your insights are valued."
    },{
        "url": "/post/the-equity-fallacy/",
        "title": "The Equity Fallacy",
        "date": "Mon Nov 06 2023 00:00:00 GMT+0000 (Coordinated Universal Time)",
        "author": "Bal√°zs HIDEGH√âTY",
        "image": "/post/the-equity-fallacy/the equity fallacy.jpeg",
        "tags": ["posts","startups","SMEs","CEOs","founder","entrepreneurship","team-setup","softwareengineering"],
        "categories": [["CEO"]],
        "summary": "<p>In the fast-paced world of startups, the journey to success is fraught with uncertainties. Startling statistics reveal that <strong>only a mere 1% of startups manage to reach the coveted IPO stage</strong>, with a significant number meeting their demise within the initial five years[^1].</p>\n<p>The idea of working for equity alone is a double-edged sword, raising questions about the feasibility and motivations of ‚Ä¶</p>\n",
        "text": "In the fast-paced world of startups, the journey to success is fraught with uncertainties. Startling statistics reveal that only a mere 1% of startups manage to reach the coveted IPO stage, with a significant number meeting their demise within the initial five years[1].\nThe idea of working for equity alone is a double-edged sword, raising questions about the feasibility and motivations of those with extensive technical expertise considering this path.\n\nBut why this pervasive skepticism? Let‚Äôs delve into the diverse personas you might encounter when contemplating equity-only arrangements.\n1Ô∏è‚É£ Imagine you are a seasoned expert with over two decades of experience, bearing substantial responsibilities, and a family to support. Why would you even contemplate, let alone afford, the notion of working solely for equity?\n2Ô∏è‚É£ Conversely, a student or junior professional with only a few years of experience might be enticed by the prospect of becoming a CTO. However, such limited expertise might fall short of meeting the standards for a technical leader. Would you feel confident investing in a product guided by such a newcomer?\n3Ô∏è‚É£ Perhaps you hope to find an individual with ample passive income? In that case, consider this: Why would such a person not prefer to establish their own venture?\n\nEquity-only offers come with a considerable risk ‚Äì the technical co-founder you secure may either abandon the project halfway through, or in unfortunate cases, remain until they've secured their full equity without delivering substantial value, leaving a trail of low-quality work behind.\n\nSo, what alternatives do you have?\nDiscovering skilled individuals to handle operational aspects at a lower cost than a technical co-founder is feasible. You don‚Äôt necessarily require a full-time CTO to optimize the technical facets. Initially, what you need is someone to establish processes, carry out regular check-ups, and provide valuable advisory and mentorship.\nThe good news? Finding such individuals is easier than you might think; simply look for the term ‚ÄòFRACTIONAL!‚Äô\n\n40-70% of startups fail within the first 5 years. ‚Ü©Ô∏é"
    },{
        "url": "/post/the-critical-choice-picking-the-perfect-cto-archetype-for-your-business-startup/",
        "title": "The Critical Choice - Picking the Perfect CTO Archetype for Your Business / Startup",
        "date": "Tue Oct 31 2023 00:00:00 GMT+0000 (Coordinated Universal Time)",
        "author": "Bal√°zs HIDEGH√âTY",
        "image": "/post/the-critical-choice-picking-the-perfect-cto-archetype-for-your-business-startup/4 CTO archetypes.jpeg",
        "tags": ["posts","startups","SMEs","CEOs","founders","entrepreneurship","team-setup","softwareengineering"],
        "categories": [["CEO"],["CTO"]],
        "summary": "<!-- # The Critical Choice - Picking the Perfect CTO Archetype for Your Business / Startup -->\n<p><strong>In a world where exceptional technical leadership can make or break a company, it's essential to consider the role of a Chief Technology Officer (CTO) with utmost care.</strong></p>\n<p>Selecting the right CTO is a critical decision, one that can significantly impact your business at its current stage and align with the existing roles within your engineering team. The wrong choice can lead to friction, ‚Ä¶</p>\n",
        "text": "In a world where exceptional technical leadership can make or break a company, it‚Äôs essential to consider the role of a Chief Technology Officer (CTO) with utmost care.\nSelecting the right CTO is a critical decision, one that can significantly impact your business at its current stage and align with the existing roles within your engineering team. The wrong choice can lead to friction, inefficiencies, and unnecessary expenses, while the right one can act as an enabler, streamlining processes, and facilitating seamless future development without additional sacrifices.\nHere‚Äôs the good news: you don‚Äôt always need a full-time CTO (and deep pockets) to get the tech expertise you need. Clear up some common misconceptions, match your CTO to your business, and watch it thrive.\n\nCommon misconceptions\nBefore we delve into the four CTO types and how they align with different company stages and the roles they encompass (all of which influence the CTO‚Äôs responsibilities), let‚Äôs dispel some myths surrounding the role of a technical expert:\n\nHiring a great CTO based solely on offering equity - This is a flawed approach with significant long-term downsides (see. The Equity Fallacy).\nBelieving that a senior lead, or even worse, a project manager with basic SQL and web app experience, can replace a technical lead - The harsh reality is that the technical expertise required by non-technical companies is measured in decades, not merely years!\nHiring a CTO without taking into account the four CTO archetypes.\n\nThe 4 CTO Archetypes\nIt‚Äôs incredibly frustrating to be part of a team that lacks clear technical guidance, hindering effective communication, making poor technical decisions, and offering no opportunities for career development or mentorship.\nWhen selecting the right CTO, it‚Äôs crucial to consider your team‚Äôs needs and existing roles; otherwise, you compromise quality and critical company cultural aspects, ultimately leading to morale, burnout, and retention issues, which will result in additional costs.\n1Ô∏è‚É£ The Architect CTO\nThe Architect CTO, a technology expert, holds responsibilities in architectural design, critical building blocks, engineering streamlining, and vendor relationship management (buy-in vs build). The impact of this role is substantial, with a lasting influence on the company‚Äôs technology platform.\n2Ô∏è‚É£ The People Leader CTO\n‚Ä¶shapes the technical culture, handles hiring, and manages the team. In later stages, their role becomes similar to that of a VP of Engineering, with a focus on career development and team growth.\n3Ô∏è‚É£ Marketing and Customer Facing CTO\nThe Marketing CTO actively engages with customers, demonstrating technical expertise, which not only boosts sales but also serves as a magnet for top talent and premium vendors. Their efforts showcase the company‚Äôs strengths and capabilities, fostering growth and success.\n4Ô∏è‚É£ R&amp;D (visionary) CTO\nThis role goes beyond coding, emphasizing strategic thinking about technology and industry evolution. They excel at spotting the next big product opportunity and guiding the company, even during challenging times. Their role is critical in driving company reinvention.\nThe 4 Stages of a Company\nNow that we‚Äôve explored the four CTO archetypes, let‚Äôs delve into the typical stages that a company goes through. Understanding these stages is crucial because most of the significant changes happen between these phases.\n1Ô∏è‚É£ Idea Stage (Market Validation)\nüåü This is where you validate your business idea and discover the right problem-to-solution fit. You expand your concept, conduct market tests, gather insights from experts and potential customers, collaborate with vendors, and begin translating your business requirements into technical ones. During this phase, low-code solutions and Minimum Viable Products (MVPs) often come into play.\n2Ô∏è‚É£ Launch Phase\nüöÄ Now, you transform your idea into a real, stable, and scalable solution, launching it to a broader audience. Measuring results, user experience, and usage becomes crucial. You might need to consider team expansion as you plan for growth.\n3Ô∏è‚É£ Growth Stage\nüå± This stage is all about generating consistent revenue and expanding your user base. You‚Äôll be balancing the acquisition of new customers, managing your revenue, and adapting your product or service to meet new user demands.\n4Ô∏è‚É£ Maturity Stage (Visionary)\nüëÅÔ∏è In the maturity stage, your company should actively seek new opportunities for expansion. This might involve building localized teams, exploring acquisitions, investing in team development, and discovering new growth channels. It‚Äôs crucial to stay focused on your core strengths and keep a close eye on the market for ongoing success.\nPutting the Pieces Together\nIn the Idea and Launch Stages, the team is relatively small, but this is where technical foundations are laid. Both of these phases require a technical CTO with an architectural focus. However, as the team grows (through hiring and managing people), the Launch Stage must not lack a personally focused CTO.\nIn the Growth Stage, a more seasoned CTO with a personal focus is required, someone who can manage managers. Besides that archetype, a marketing-focused CTO skillset becomes valuable at this stage.\nOnce the Maturity Stage is reached, most of the former CTO tasks are delegated to other leaders (such as technical leads, VPEs, and CMOs). Here, the CTO must think beyond code, focusing on technology and anticipating industry changes to prevent business disruption and react effectively.\nSummary\nIn the startup journey, the early stages serve as the foundation for future success. It‚Äôs essential to establish strong technical foundations that create long-term value, laying the groundwork for sustainable growth. Initiating these phases without the technical CTO archetype is likely to disrupt this success path.\nIn closing, it‚Äôs crucial to keep one additional thing in mind when it comes to the CTO role: it is inherently strategic, with a primary focus on long-term value creation. This strategic nature can, at times, create friction with short-term operational goals, resulting in conflicts of interest with roles on the operational team. Because of this conflict of interest, to make the best use of your CTO, it‚Äôs advisable to avoid assigning operational tasks to them. This approach will help ensure that the CTO‚Äôs strategic vision can contribute effectively to the long-term growth and value of your company / startup."
    },{
        "url": "/post/designing-microservices-the-right-way/",
        "title": "Designing Microservices the Right Way",
        "date": "Mon Feb 26 2024 00:00:00 GMT+0000 (Coordinated Universal Time)",
        "author": "Bal√°zs HIDEGH√âTY",
        "image": "/post/designing-microservices-the-right-way/erik - atelier lumier.png",
        "tags": ["posts","development","developers","junior-developers","management","teamlead","techlead","architecture","advanced SOA"],
        "categories": [["Newsletter"],["Newsletter","Architecture"],["Development","Architecture"]],
        "summary": "<p><strong>Remember, business goals are rarely about having a top-notch system!</strong></p>\n<p>Finally, we have arrived at the point where we can discuss the pinnacle of modern software architecture: <strong>microservices</strong>.</p>\n<p>When it comes to designing a software system, it's not easy. <strong>Designing microservices is even harder</strong>. And even if you do it right, there are situations where you will run into issues.</p>\n<p>This is ‚Ä¶</p>\n",
        "text": "Remember, business goals are rarely about having a top-notch system!\nFinally, we have arrived at the point where we can discuss the pinnacle of modern software architecture: microservices.\nWhen it comes to designing a software system, it‚Äôs not easy. Designing microservices is even harder. And even if you do it right, there are situations where you will run into issues.\nThis is why I always suggest that before contemplating Microservices, one should always consider scaling up. Here‚Äôs my article on LinkedIn about 10 scaling-up possibilities before considering microservices - also available here.\n\nToday‚Äôs lesson and the summary are based on these two great talks:\n\nMicroservices and Rules Engines ‚Äì a Blast from the Past - Udi Dahan\nAvoiding Microservice Megadisasters - Jimmy Bogard\n\nLet‚Äôs dive into the nuances and challenges of microservices‚Ä¶\nConsider this summary article as a concise way to reinforce the main message: one should always consider scaling up first.\nBusiness first\n\nRemember, business goals are rarely about having a top-notch system!\nWe should aim for a decent one that‚Äôs easy to maintain, extend, and scale.\n\nThe best example of how a simple approach can outperform a full-fledged system is demonstrated in a Microservices-related conference by Jimmy Bogard.\nTo achieve higher business goals, like increasing checkouts and paying customers, he opted to disable certain input validations (such as those on credit card numbers) and avoid blocking or frustrating users during checkout. Thus addressing any issues later via an in-person phone call proved more advantageous for the company than insisting on a top-notch form or system upfront, potentially resulting in losing clients.\nMicroservices RED FLAGS\nIf you notice any of these signs, then you‚Äôre approaching microservices the wrong way:\n\n1Ô∏è‚É£ Unclear data ownership.\n2Ô∏è‚É£ Shared data store (either directly through the database, indirectly via a REST layer on the database, or through other workarounds).\n3Ô∏è‚É£ Excessive service dependencies - Cascading API calls beyond the gateway create complex dependencies and increase the risk of API hell and distributed deadlocks.\n4Ô∏è‚É£ Replication via messaging - Volatile business logic data is duplicated through pub-sub mechanisms, indicating incorrect service boundaries and unclear service responsibilities.\n5Ô∏è‚É£ Overly granular services\n\nWhat to know when designing microservices\nIt‚Äôs all about mindset. To do it right, we need to understand:\n\nThe correct definition of a service, considering both their hosting and data aspects.\nThe truth about coupling.\nThe importance of service boundaries and data ownership.\nThere are situations where microservices do not fit well (but that aspect is manageable as well).\n\nAll these details are provided in the main video.\nWhere microservices come short\nHowever, as your business needs become more intricate, such as with Rules Engines, you may encounter challenges with encapsulation.\nWhat are those business use cases? Here are some examples:\n\nSearch (engine)\nPricing (engine)\nFraud detection (engine)\n\nIn these instances, you require data from multiple services, and the temptation might be to simply send that data across! But please, refrain from doing so!\nMicroservices - Major takeaways\nThere are the major takeaways:\n\ncoupling is a part of real life, so it is part of the code\nwe can‚Äôt remove top-to-bottom coupling, but we can remove side-by-side coupling (using micro frontends and UI composition)\ndefinition of: systems, services, unit of deployment‚Ä¶\nservices own their data, they should not share data (to other systems) that‚Äôs volatile\n\nThese are services:\n\nproduct information\nprice information\ninventory levels\n\nBut these aren‚Äôt:\n\nsearch\npricing\nfraud detection\n‚Ä¶these are composite kinds of systems‚Ä¶\n\nSearch is challenging; Google has set high standards, leading to unrealistic expectations for searches conducted by small teams in a matter of weeks, in contrast to Google‚Äôs search engine developed by a team of 10,000 developers.\nHow we solve those cross-cutting services\n‚Ä¶which needs data from everywhere?\nThe bell.com case - duplicating data\nSometimes, we can do it by duplicating data relevant to the search (redundant or limited data, that can be recreated at any time).\nThis type of dependency inversion is what Jimmy Bogard showcased in the 2nd linked video [^2] (but please keep in mind that that design choice was given by the existing system which they tried to fix)‚Ä¶\n‚Ä¶or we can do it via composing components from services\nThe hosting (composing) side of microservices\n\nWe take ‚Äúparts‚Äù from different services, we arrange all them together on that platform (system)\nThe system does not really have its own code, all the code belong to the services.\nThe system does not really own any data, the data is owned by those services.\n\nThis approach allows us to create these generic engines (systems)!\n‚Ä¶but introducing dependencies between systems implies the need for orchestrated deployments. Consequently, tools like Kubernetes become essential for managing and coordinating the deployment of these interdependent systems efficiently.\nThe data side of microservices\n\nThe system (referenced previously in the hosting section) does not own the data.\nThe data is owned by the services.\nThe service doesn‚Äôt share that data; it doesn‚Äôt send it out to other microservices, neither through an API call nor via a shared database.\nEven with pub-sub, ideally, you want to be sending nothing more than some identifiers.\n\nIf you start sharing data that‚Äôs volatile, such as a price or an address, that‚Äôs when you start getting into trouble. Again, the issue here is not about how you share it but the fact that you‚Äôre sharing it in the first place.\nGeneric engines\nSearch engine\nSearch is not just about free-text search.\nRelevance matters as well (especially in the case of a huge amount of data).\n\nprice\nbrand\ncolor\n‚Ä¶\n\nPricing engine\nSame as search, customer specific pricing and fraud detection too will need access to multiple services, we will actually need to access specific classes implementing specific interfaces from those services.\n\nPlug‚Äôn‚Äô Play\nAssembly-scanning gives plug-n-play\nAt process startup, scan the runtime directory, load all assemblies, and scan types for those that implement a specific interface (IProvidePriceFactor, IProvideFraudMultiple, ‚Ä¶).\nOutro\nHopefully, with all these details, you will be able to develop your first microservice successfully and without mega-disasters‚Ä¶\nBut is that all? Well, not really. We talked about design, but there‚Äôs one challenge that still remains: managing the deployment (of physical service instances referred to previously as systems), where a single physical service instance can depend on multiple logical microservices.\n\nüìå Make sure you and your team subscribe (follow me) on ¬†LinkedIn so you don‚Äôt miss out on the latest insights!"
    },{
        "url": "/post/simple-api-integration-problems-and-patterns/",
        "title": "Simple API - Integration Problems and Patterns",
        "date": "Mon Feb 19 2024 00:00:00 GMT+0000 (Coordinated Universal Time)",
        "author": "Bal√°zs HIDEGH√âTY",
        "image": "/post/simple-api-integration-problems-and-patterns/integration.jpg",
        "tags": ["posts","development","developers","junior-developers","management","teamlead","techlead","architecture","advanced SOA"],
        "categories": [["Newsletter"],["Newsletter","Architecture"],["Development","Architecture"]],
        "summary": "<p>Even the simplest distributed system ‚Äì <span class=\"text-highlight\">yes, even integrating against a single API ‚Äì can pose significant challenges</span> (more than 80% of solutions that SMEs have). <strong>Mind-blowing, right!?</strong></p>\n",
        "text": "Even the simplest distributed system ‚Äì yes, even integrating against a single API ‚Äì can pose significant challenges (more than 80% of solutions that SMEs have). Mind-blowing, right!?\n\nWe started our distributed systems series by showcasing the dangers that 6 little lines of code can pose in a fairly simple system. Today, we kick off with the simplest distributed system that can exist - integrating against an API, and we delve into all the complexities that such a simple scenario can introduce.\nSo make sure to check out Udi Dahan‚Äôs insightful talk here:\nAdvanced API and Integration Problems &amp; Patterns - Udi Dahan - NDC Oslo 2022 - YouTube\nBelow is a quick summary of what you can expect to take away from the given talk‚Ä¶\n\nFailures and Duplicates\nToday‚Äôs journey starts with handling failures. As we see, when the system is under load, longer response times and timeouts become a possibility. Automated retries can easily result in duplicates being created.\nSo, we need to handle duplicates. We can de-duplicate on the API side (idempotency), but what about legitimate duplicates? Not all duplicates are errors, life is not ideal! Also, what about the client side? What if the user unintentionally creates a duplicate (double-click and cache issues)? What if the user wants to create a duplicate?\nThe problem of duplicates escalates when integrating with other systems, where, based on one of the data (id), other events and external processes are started. Deciding which entity is the duplicate and which one to delete isn‚Äôt straightforward anymore!\nDetect duplicates (API side):\n\ncomparing data\nde-duplication identifier (has downsides, like how long to store, etc.)\nwhy not use entity ID (and assign a GUID at the client side) - simpler\n\nDetect/avoid duplicates (client side):\n\navoid double-click issue\nprevent resubmission via navigating back in the browser (post-redirect-get)\ncheck existing data and ask client if s/he wants to create a duplicate (cache issue)\n\nTackling Integration\nLong chains of API calls can lead to latency issues. Are there other alternatives!?\n\n‚ö†Ô∏è Now, before considering Microservices, think about scaling up.\nüí° Here‚Äôs my article on Linked In about 10 scaling-up possibilities before considering microservices - also available here.\n\nMicroservices bring a couple of issues, such as:\n\n‚Ä¶more complexity in deployment and versioning (let‚Äôs say in ‚Äúone‚Äù word: extra costs)\n‚Ä¶potential inconsistency\n‚Ä¶issues with logical boundaries (see note in the Messaging chapter below)\n\nMessaging might help, but:\n\n‚Ä¶ ‚ö†Ô∏è it can result in pub-subbing (duplicating) business data, indicating that logical boundaries aren‚Äôt right; there‚Äôs an issue with service responsibilities.\n‚Ä¶always use the outbox pattern to avoid issues with database race conditions and deadlocks, which might lead to publishing an event for a non-existing entity due to a rollback.\n‚Ä¶also, when it comes to idempotency, the question is: who handles deduplication ‚Äì the event producer or consumer?\n\nOutro\nAs it‚Äôs showcased, building even simple systems can be challenging, and when it comes to integration, extra care is needed.\nWe hope that now, with this knowledge and these patterns in your arsenal, you‚Äôll be well on your way to building robust and efficient enterprise software solutions!\n\nüìå Make sure you and your team subscribe (follow me) on ¬†LinkedIn so you don‚Äôt miss out on the latest insights!"
    },{
        "url": "/post/distributed-system-design-and-fallacies/",
        "title": "Distributed System Design and Fallacies",
        "date": "Mon Feb 12 2024 00:00:00 GMT+0000 (Coordinated Universal Time)",
        "author": "Bal√°zs HIDEGH√âTY",
        "image": "/post/distributed-system-design-and-fallacies/udi dahan.jpg",
        "tags": ["posts","development","developers","junior-developers","management","teamlead","techlead","architecture","advanced SOA"],
        "categories": [["Newsletter"],["Newsletter","Architecture"],["Development","Architecture"]],
        "summary": "<p>Distributed applications (APIs)? Avoid technical hiccups! <span class=\"text-highlight\">Break free from misconceptions and build truly resilient distributed systems!</span></p>\n",
        "text": "Distributed applications (APIs)? Avoid technical hiccups! Break free from misconceptions and build truly resilient distributed systems!\n\nIn our previous post, we introduced that when writing modern (distributed) applications, extra care is needed.\nBefore we move on to the usual integration patterns (in the next post), let‚Äôs discuss something important that we often forget when forging modern applications.\n\nYes, I‚Äôm thinking of the fallacies of distributed systems.\n\nAddressing the fallacies of distributed systems isn‚Äôt just about avoiding pitfalls; it‚Äôs about implementing practical solutions. Whether you‚Äôre a developer aiming for resilient architectures, a CEO concerned about business continuity, or a non-tech founder eager to navigate the tech landscape, understanding and applying proven strategies is crucial.\nWho better to enlighten us on this subject than ¬†Udi Dahan, the author of NServiceBus? Let‚Äôs extend a warm welcome to another favorite author of mine.\nWatch ‚ÄòFallacies of Distributed Systems #1 - #8‚Äô on YouTube.\n\nBut the fallacies are just the start. If you are interested in learning more about distributed system design, I strongly advise you to take this course:\nLearn Advanced Distributed Systems Design ‚Ä¢ Particular Software\n\nSneak peek:\nFallacies of Distributed Systems #2: Latency is Zero - One of the fallacies of distributed systems is that latency is zero. In reality, it can take much longer for data to travel between two machines than it does to perform a local operation. Crossing geographical boundaries? Expect even more delay. This can be a major problem for applications that need to be fast and responsive.\n\nüìå Make sure you and your team subscribe (follow me) on ¬†LinkedIn so you don‚Äôt miss out on the latest insights!"
    },{
        "url": "/post/6-little-lines-of-fail-everything-is-distributed/",
        "title": "6 Little Lines of Fail - Everything is Distributed",
        "date": "Mon Feb 05 2024 00:00:00 GMT+0000 (Coordinated Universal Time)",
        "author": "Bal√°zs HIDEGH√âTY",
        "image": "/post/6-little-lines-of-fail-everything-is-distributed/6 little lines of fail.png",
        "tags": ["posts","development","developers","junior-developers","management","teamlead","techlead","architecture","advanced SOA"],
        "categories": [["Newsletter"],["Newsletter","Architecture"],["Development","Architecture"]],
        "summary": "<p>In today's tech-driven world, <span class=\"text-highlight\">even the simplest-looking code can wreak havoc if not handled by seasoned experts</span>. This's why technical experts are not just &quot;nice to have&quot; for companies, but a crucial lifeline.</p>\n<p><strong>TimeoutException - Probably, this is one of the trickiest errors of all because, sometimes, it's not even an error!</strong></p>\n",
        "text": "In today‚Äôs tech-driven world, even the simplest-looking code can wreak havoc if not handled by seasoned experts. This‚Äôs why technical experts are not just ‚Äúnice to have‚Äù for companies, but a crucial lifeline.\nTimeoutException - Probably, this is one of the trickiest errors of all because, sometimes, it‚Äôs not even an error!\n\nToday‚Äôs ‚Äúlesson‚Äù is for management.\nIt‚Äôs short and simple.\nYour company engages in distributed computing, whether it realizes it or not‚Ä¶\n‚Ä¶just as your company is a tech company, whether you realize it or not (you depend on technology, you use it to fuel your business).\nSo you need technical experts more desperately than you‚Äôd ever admit to yourself.\nBecause‚Ä¶\n\nFAILURE IS ALWAYS AN OPTION!\n\nIntro\nDistributed computing is not easy.\nHow difficult is it?\nWell‚Ä¶\nHere are six lines of code;\nNicely written;\nEasy to read;\nThey are perfect;\n‚Äì yet‚Ä¶\n‚Ä¶with distributed computing, disaster awaits under the hood.\n\nDon‚Äôt let hidden disasters sabotage your company‚Äôs success.\nEmbrace the power of technical expertise.\nMinimize failures - by ensuring that at least two pairs of eyes are always on your code (yes, two seniors are better than one).\n\nThat‚Äôs it.\n(That‚Äôs my message!)\nRegarding the content below: I suggest to check out at least the summary to see what kind of business related decisions building a software requires - for that, scroll there via this link.\n‚Äì\nThe linked video (and its summary) is primarily intended for developers and curious managers. Both audiences need to grasp that technical decisions are shaped by business requirements, emphasizing the crucial role of effective communication.\n‚Äì\nüìå So here it is: Six Little Lines of Fail - Jimmy Bogard - YouTube\n6 Little Lines of Fail - Summary\n5 Potential Points of Failure\nThe problem with the provided code is: missing failure handling\nThere are five potential points of failure:\n\nWhen the call to the database (order placement) fails: The system displays an error message, but it remains consistent (although no error is good after credit card information has been entered into the system)!\nWhen the call to Stripe fails:\n\nTimeout error:¬†The payment may have been processed successfully (money withdrawn),¬†but the user receives a timeout exception. Probably, this is one of the trickiest errors of all because, sometimes, it‚Äôs not even an error!\nOn other errors:¬†The system remains at least consistent.\n\nWhen SendGrid fails: With Stripe already succeeding and the transaction being rolled back, the user is billed for nothing. (The customer calls customer service, incurring further costs, and there is no order detail, leading to a poor user experience.)\nWhen RabbitMQ fails: Similar issues arise as with SendGrid (plus we already told the customer that the payment was successful).\nWhen the transaction fails: All the issues above occur.\n\nSo how to avoid them?\nYou don‚Äôt!\nYou can‚Äôt!\nIt‚Äôs not a matter of WHETHER something fails, but rather WHEN it does.\n\nFAILURE IS ALWAYS AN OPTION!\nASSUME FAILURES, PLAN FOR THE WORST!\n\n‚Äì\nBut good news;\nThere are 4 options for dealing with failures.\nDealing with failures (in software)\nIntroducing Gregor Hohpe‚Äôs insightful perspectives on handling failures‚Ä¶\nThere are 4 options for dealing with failures:\n\nIgnore failure - For non-critical cases and non occuring failures (like logging failures aren‚Äôt critical for the business)\nRetry operation - Can it be retried? How long to retry? How to handle constant failing? Needs a retry policy!\nUndo action (compensation) for the succeeded part(s) if other parts fail (or database transaction rollback).\nCoordinate: Prepare / Commit phase - Real-life sample: buying a house via a broker - it comes with a cost (money and/or time overhead).\n\nWhich one of the four options to choose? It depends mostly on the business, but in some cases, the technical capabilities of the underlying systems might also intervene (reduce options).\n\nExplore Gregor Hohpe‚Äôs valuable insights on handling failures through his compelling works:\n\nStarbucks Does Not Use Two-Phase Commit\nThe Software Architect Elevator: Redefining the Architect‚Äôs Role in the Digital Enterprise: Hohpe, Gregor: 9781492077541: Amazon.com: Books\n\nThe Master Plan\n\nFor each external resource, examine possibilities and pick the best option based on business requirements!\n\nSTRIPE\n\nIgnore - We don‚Äôt want to ignore a failed payment, we want to fulfill the order (although in real world we might ignore payment problems - like loyal client, small amount, etc.)\nRetry - We need to avoid double charging; we need idempotency! Usual cases of double charging can include: double-click, timeout issues followed by retries. Google: stripe idempotency (idempotency key or cartId)!\nUndo - Credit vs. refund which is supported by stripe! But what if refund fails? What if refund timeouts?\nCoordinate - Stripe supports 2 step payment flows (pending transaction)! Authorize and then capture. If capture fails, the Stripe UI allows to do manual retries‚Ä¶\n\nSEND GRID\n\nIgnore - Do we want to fail the entire order process if we can‚Äôt send a ‚Äúthank you for your order‚Äù email? Here ignore can be a valid option!\nRetry - Sendgrid has no idempotency. The business would like to have exactly one email sent out, but that does not work with distributed systems. So, they have to choose between 0 or 1 email, or at least one (so 1 or more) email(s)!\nUndo - NOT POSSIBLE (Google postpones email sending to allow undo - they wait 10-second before sending an email). We can do business level compensation actions: apology email and providing coupons.\nCoordinate - N/A\n\nRabbitMQ (similar to emails)\n\nIgnore - Flag the order and let a background process to retry failed messages later on) - SET order.needsOrderCreatedEventRaised = true;\nRetry - Azure Service Bus has duplicate message detection within a given time period; others have the concept of retry. However, RabbitMQ does not, so here we need to know how consumers react to duplicate messages. We need to have control there (on the consumer side) or choose another option to deal with the failure.\nUndo - N/A - We can‚Äôt unsend the message! Compensating message would be weird! From a business perspective an undo of the order is an option.\nCoordinate - N/A\n\nBreaking The Process Coupling\n\nWe can‚Äôt encode all these options directly into the main code!\n‚Ä¶too much branching leads to unmaintainable code!\n\nSo we need a different approach!\nCan we avoid exceptions by breaking the process coupling? The answer is: yes, we can! But how is something that the business has to define.\nCan we avoid exceptions by breaking the process coupling? The answer is: yes, we can! However, there are many details that the business needs to define.\nThe Business Part\nWe need to ask:\n\nDo we have to execute these steps now, or can we execute them in the future?\nIs there a specific order in which the steps should be executed?\n\nPayment (STRIPE)\nBusinesses with finite amount of resources (movie tickets bound to a seat, reservation timer) might need to charge immediately, while Amazon with infinite stocks might allow to charge later (in this case we can utilize a background process for payment and even do easily retries for failed charging).\nNotification (SENDGRID)\nWhen to email the user: after placing the order or when the payment goes through? Is it okay to delay the order notification if the payment fails (knowing that we‚Äôll try again)? What if the user thinks the order failed and buys elsewhere? How about sending separate emails for a successful order and payment?\nThere‚Äôs another business decision here regarding retries (mentioned in the previous chapter): In the event of issues, we can‚Äôt ensure that exactly one email is sent out. We can have either 0 or 1 email sent (e.g., it‚Äôs acceptable if the user does not receive an email at all), or we can ensure at least 1 email being sent (e.g., it‚Äôs acceptable if the user occasionally receives duplicate emails).\nFulfilling the order / Order placed event (RABBITMQ)\nAfter placing an order, we inform others to fulfill it.\nHave you considered this? Despite having consistent data in our database, clarity only emerges when warehouse personnel check. This is especially true with finite resources, particularly when selling the last items. Only by checking the store can we be sure if we‚Äôre able to fulfill the order. Consider this as another kind of ‚Äúeventual‚Äù consistency, as issues like loss, theft, damage, direct sale, or processes outside the usual protocol can lead to discrepancies between the real stock count and the database.\nIMPORTANT: In messaging systems, when dispatching messages as a part of an atomic operation, it is important to understand and implement the outbox pattern.\nThe Technical Part\n\nModern eCommerce uses background processes to fulfill an order (higher degree of success)!\n\nFor this, we can leverage workflows. Here are some workflow patterns to consider:\n\nRouting Slip: Linear flow.\nSaga Pattern (e.g., booking a holiday with car, hotel, and flight): With compensation, useful for simple scenarios where each step can be executed individually.\nProcess Manager Pattern: Orchestration, command-based (order matters), or choreography, event-based.\n\nThere‚Äôs another kind of Saga definition that closely aligns with the Process Manager pattern. Check out Saga pattern - Azure Design Patterns | Microsoft Learn for insights into orchestration and choreography differences, along with their pros and cons.\nConclusion\nIn the dynamic realm of distributed computing, technical expertise is essential to navigate potential pitfalls, as highlighted by the elusive TimeoutException.\nThis article and the linked video underscores the inevitability of failures and introduces strategies to address them, emphasizing the need for a tailored approach aligning with business requirements and technical capabilities. It stresses the importance of breaking process coupling and concludes by advocating for the use of workflow patterns to efficiently orchestrate complex processes, highlighting the delicate interplay between business and technology in the digital landscape.\n\nüìå Make sure you and your team subscribe (follow me) on ¬†LinkedIn so you don‚Äôt miss out on the latest insights!"
    },{
        "url": "/post/unit-testing-101/",
        "title": "Unit Testing 101",
        "date": "Mon Jan 29 2024 00:00:00 GMT+0000 (Coordinated Universal Time)",
        "author": "Bal√°zs HIDEGH√âTY",
        "image": "/post/unit-testing-101/unit testing (book).jpg",
        "tags": ["posts","development","developers","junior-developers","management","teamlead","techlead"],
        "categories": [["Newsletter"],["Newsletter","Clean Code"],["Development","Clean Code"]],
        "summary": "<p><strong>If you don't know the rules, you'll end up doing things the hard, costly way.</strong> The next step in our journey to quality code is Unit Testing 101 ‚Äî the other thing that is either not taught or taught using overly simple examples.</p>\n",
        "text": "If you don‚Äôt know the rules, you‚Äôll end up doing things the hard, costly way. The next step in our journey to quality code is Unit Testing 101 ‚Äî the other thing that is either not taught or taught using overly simple examples.\n\nWhen it comes to testing, I‚Äôve found that most examples of TDD are on ideal and simple scenarios, understandable even to a kindergarten student. However, in reality, confusion arises.\nOptions are endless, but not every approach results in meaningful tests. Some tests may become brittle, requiring a lot of extra work with each change, etc.\nFor testing, we need mocks, stubs, etc., and believe it or not, there are great rules for when and how to apply them.\n\nLegacy code = code that has no unit test coverage\n\nIn the previous chapter, we focused on DDD and introduced a couple of key factors that make testing easier:\n\nEncapsulation\nSeparating object behavior and state from persistence\nLayered architecture and other great patterns\n\nAll are key factors in creating tests.\nNow, it‚Äôs time to delve into the principles I‚Äôve mentioned, and for that, your go-to source is Vladimir Khorikov - Unit Testing - Principles, Practices, and Patterns.\nDiscover:\n\nThe characteristics of a robust unit test\nProven techniques for effective test writing\nStrategic choices for deciding what to test\nThe value and insights derived from each test\nBest practices for testing dependencies\n‚Ä¶and more\n\nBut dear CEOs, Founders, when it comes to tests, here‚Äôs my perspective: remember Goodhart‚Äôs Law: ‚ÄòWhen a measure becomes a target, it ceases to be a good measure.‚Äô The key factor is indeed knowing what to test and understanding the security the tests provide!\nSo fellow Developers, if you encounter a ‚Äú100% test coverage‚Äù requirement - RUN!\nStay tuned - Summaries from the book are coming soon!\n\nAlso explore practical testing wisdom with a video from Derek Comartin, a favorite author of mine. Watch as he navigates usual but tricky scenarios without relying on mocks in Testing WITHOUT Mocks or Interfaces! - YouTube\nContent:\n\ntesting time (the DateTime.Now issue)\n\n01:15 using interfaces - see also .NET8 ITime and TimeProvider\n04:53 using delegates (functions)\n07:08 passing in data\n\n08:54 testing API calls (HttpClient)\n\nüìå Make sure you and your team subscribe (follow me) on ¬†LinkedIn so you don‚Äôt miss out on the latest insights!"
    },{
        "url": "/post/domain-driven-design-and-refactoring/",
        "title": "Domain Driven Design and Refactoring",
        "date": "Mon Jan 22 2024 00:00:00 GMT+0000 (Coordinated Universal Time)",
        "author": "Bal√°zs HIDEGH√âTY",
        "image": "/post/domain-driven-design-and-refactoring/ddd cover.jpg",
        "tags": ["posts","development","developers","junior-developers","management","teamlead","techlead","architecture"],
        "categories": [["Newsletter"],["Newsletter","Clean Code"],["Development","Clean Code"]],
        "summary": "<p>We have reached the 3rd part of our quality code series‚Äînow, let's talk about <strong>Domain-Driven Design (DDD)</strong>. Why does it matter? Because <strong>we solve business problems</strong>, and DDD tackles communication, coding/structure, and complexities in the software industry for an <strong>easily maintainable, scalable solution</strong>.</p>\n",
        "text": "We have reached the 3rd part of our quality code series‚Äînow, let‚Äôs talk about Domain-Driven Design (DDD). Why does it matter? Because we solve business problems, and DDD tackles communication, coding/structure, and complexities in the software industry for an easily maintainable, scalable solution.\n\nDespite Object-Oriented Programming (OOP) being around for a while, the typical code written by many developers (around 2003) remained procedural and anemic. The prevalence of naming everything as ‚Äúservice,‚Äù ‚Äúhelper,‚Äù or ‚Äúutils‚Äù resulted in what is known as anemic domain models, where the behavior and logic were scattered across the application, primarily residing in service classes rather than encapsulated within the objects themselves. The main classes were just pure POJOs, with public getter-setters, no encapsulation of state, and no behavior. This had implications for the clarity and maintainability of the code.\n\nWhen I initially read the book, I was still in the early stages of my development career, but I quickly recognized the significant advantages that this design approach could bring.\nBusiness-First Focus: The design emphasized prioritizing the business domain, aligning the software (and the language used) closely with the real-world problems it aimed to solve.\nDDD‚Äôs Impact on Code Organization:\n\nBy reintroducing essential concepts, such as encapsulation (keeping behavior within objects), the need for excessive functional ‚Äúservice‚Äù components was minimized, resulting in code that became simpler and more organized.\n\nBy detaching code and business functions (domain logic) from other layers (persistence), we can significantly reduce complexity, improve testability, and facilitate easier maintenance.\n\nEnough talk. Here are two videos to showcase DDD, both from Jimmy Bogard.\n\nSince DDD is also about modeling, let‚Äôs start with this one, so you can learn some of the basic concepts of it: Domain Driven Design: The Good Parts - Jimmy Bogard - YouTube\n\nAs developers, we always aim to write better code. What better way to learn than by understanding how to convert (refactor) anemic code into something with behavior? Domain-Driven Refactoring - Jimmy Bogard - NDC London 2022 - YouTube\n\nAnd finally, here‚Äôs the link to the book: Domain-Driven Design: Tackling Complexity in the Heart of Software\n\nüìå Make sure you and your team subscribe (follow me) on ¬†LinkedIn so you don‚Äôt miss out on the latest insights!"
    },{
        "url": "/post/john-k.-ousterhout-a-philosophy-of-software-design/",
        "title": "John K. Ousterhout - A Philosophy of Software Design",
        "date": "Mon Jan 15 2024 00:00:00 GMT+0000 (Coordinated Universal Time)",
        "author": "Bal√°zs HIDEGH√âTY",
        "image": "/post/john-k.-ousterhout-a-philosophy-of-software-design/a philosophy of software design (book).jpg",
        "tags": ["posts","development","developers","junior-developers","management","teamlead","techlead"],
        "categories": [["Newsletter"],["Newsletter","Clean Code"],["Development","Clean Code"]],
        "summary": "<p>Achieving <strong>excellence</strong> in software development demands a balanced mix of hands-on creativity and principled methodology. As a <strong>leader</strong> (CEO, founder, technical lead), you need to <strong>figure out what works for you and your team</strong>!</p>\n<p>Now let's tackle &quot;software design&quot; again, from a slightly <strong>different perspective</strong>...</p>\n",
        "text": "Achieving excellence in software development demands a balanced mix of hands-on creativity and principled methodology. As a leader (CEO, founder, technical lead), you need to figure out what works for you and your team!\nNow let‚Äôs tackle ‚Äúsoftware design‚Äù again, from a slightly different perspective‚Ä¶\n\nPreviously, we drew attention to Robert C. Martin‚Äôs Clean Code. We acknowledged his principles-driven approach, and besides coding, we touched on management and architecture-related topics as well.\nToday, let me tackle the same problem ‚Äì effective, maintainable, scalable code ‚Äì from a different perspective.\nAllow me to introduce John Osterhout‚Äôs Philosophy of Software Design and his hands-on magic secrets.\nDespite some differences in approaches between the two mentioned authors, their goal is the same.\nThe book highlights these major secrets of success:\n\nWorking code isn‚Äôt enough: it must minimize complexity.\nStrategic vs. tactical programming (mindset).\nClasses should be deep [1].\nDefine errors out of existence [2].\n\nStay tuned - Summaries of the videos will be coming soon!\nLink to the book: A Philosophy of Software Design: Ousterhout, John | Amazon.com: Books\nLink to the google talk video: A Philosophy of Software Design | John Ousterhout | Talks at Google - YouTube\n\n0:00 Introduction\n2:02 Software design is a black art\n3:07 The basics\n9:54 The magic secrets\n12:33 Deep classes\n17:49 Class situs\n20:32 UNIX File IO\n21:51 Define Errors\n24:44 File Deletion\n28:13 Exceptions\n33:59 Mindset\n37:05 Strategic Approach\n40:14 How much to invest\n47:42 Is the course working\n49:40 Writing a book\n51:19 Principles emerging\n52:51 QA\n55:06 Threads\n\nA summary done on the YT channel HowieCode: 7 Software Design Concepts from John Ousterhout - YouTube\n\nüìå Make sure you and your team subscribe (follow me) on ¬†LinkedIn so you don‚Äôt miss out on the latest insights!\n\nIn contrast to Robert Martin‚Äôs approach, which is easy to misinterpret (classes should be small, should do one thing), Osterhout‚Äôs way of defining meaningful classes is probably easier to understand. ‚Ü©Ô∏é\n\nHere, the author showcases how easy it can be to provide a better user and programmer experience by avoiding errors (exceptions) just by looking at things from a slightly different angle. ‚Ü©Ô∏é"
    },{
        "url": "/post/getting-started-robert-c.-martin-clean-code/",
        "title": "Getting started - Robert C. Martin - Clean-Code",
        "date": "Fri Jan 05 2024 00:00:00 GMT+0000 (Coordinated Universal Time)",
        "author": "Bal√°zs HIDEGH√âTY",
        "image": "/post/getting-started-robert-c.-martin-clean-code/clean code (book).jpg",
        "tags": ["posts","development","developers","junior-developers","management","teamlead","techlead"],
        "categories": [["Newsletter"],["Newsletter","Clean Code"],["Development","Clean Code"]],
        "summary": "<p><strong>Knowing the right things</strong> is the way to move forward <strong>quickly</strong> and produce <strong>great results</strong>.</p>\n<p>This post is intended for developers eager to enhance their skills. It's equally valuable for <strong>CEOs</strong>, <strong>CTOs</strong>, <strong>VPEs</strong>, and <strong>Technical Leads</strong> who oversee a team and aspire to deliver <strong>quality products</strong>. Half of the videos do deal with management related-topics.</p>\n",
        "text": "Knowing the right things is the way to move forward quickly and produce great results.\nThis post is intended for developers eager to enhance their skills. It‚Äôs equally valuable for CEOs, CTOs, VPEs, and Technical Leads who oversee a team and aspire to deliver quality products. Half of the videos do deal with management related-topics.\n\nIf you are here, you are likely either a CEO, Founder who wants their developers to quickly master the most important part of software engineering‚Ä¶\n‚Ä¶or you‚Äôre a developer who just aims to get better in their profession.\nEither way, you‚Äôre welcome.\n\nTo achieve great results, we don‚Äôt need to know everything; we just have to know the right things.\n\nUnfortunately, the usual learning and mentoring process is broken.\nWe learn new frameworks, new APIs, new architectures, but we often lack the wisdom of creating clean, readable code, which is a prerequisite for manageability, extensibility, scalability, and low-maintenance products.\nThis series of articles (posts) will help you to:\n\nLearn the basics\nLearn it quickly\n\nI‚Äôll share content from various sources, so feel free to identify the ones that resonate the most with you, and begin your learning path with the resource that suits your comprehension preferences.\nOverall, I‚Äôll strive to minimize redundant information, as I aim to facilitate your rapid advancement!\n\nSo, after this lengthy introduction, we‚Äôve arrived at the threshold of our inaugural lesson.\nThere‚Äôs one piece of bad news I have: We will start with probably the longest journey. As what I will share now is a series of six YouTube videos, each being far beyond an hour long.\nThe good news is:\n\nFor junior developers,¬†the first two videos are the ones to watch.\nThe rest of the videos touch on topics from management.\n\nI do have the book and have read it (but don‚Äôt expect me to post a photo with it), I usually prefer books, but I still find the video version more enjoyable. Perhaps it‚Äôs Robert C. Martin‚Äôs unique way of presenting, the intros, or the speed you get by watching instead of reading, but it makes it unique to me.\nAnyhow, here are the links and also functioning links to specific chapters of those videos (great for quick future reference).\nStay tuned - Summaries of the videos will be coming soon!\n\nClean Code - Uncle Bob / Lesson 1 - YouTube\n\n3:41 Uncle Bob Introduction / My Tribe\n4:49 How Far is the Sun?\n10:52 Introduction to Clean Code\n12:21 The current Society works with Software\n19:47 Volkswagen case / Introduction to the Ethics of Software Development\n24:28 Why are Programmers so slow?\n32:13 What is a Clean Code?\n40:09 Analyzing some lines of code\n43:43 Long code is not Good Code\n49:25 Good Code / Refactored Function\n52:40 Polite Code / Rules for writing a newspaper article\n55:25 Shrunk Code / The Rules of Functions\n1:00:23 Shrunk Code / Drawing a Function\n1:05:36 When and why was Java invented?\n1:08:52 Prose Code / Arguments\n1:16:13 Avoid Switch Statements / Problems and Evolution of some programming languages\n1:26:15 The Uncle Bob‚Äôs wife message (funny moment)\n1:27:22 Output Arguments No Side Effects / Garbage Collection\n1:32:21 No Side Effects / Using Lambda\n1:34:26 No Side Effects / Command and Query Separation\n1:35:30 No Side Effects / Prefer Exceptions to returning error codes\n1:37:05 DRI Principle (Don‚Äôt Repeat Yourself)\n1:39:21 Structured Programming / Edsger Dijkstra Vision vs Actual Vision of the programming\n\nClean Code - Uncle Bob / Lesson 2 - YouTube\n\n0:00 Where did the moon come from?\n4:56 What is the Purpose of the Comment? / About Fortran\n8:47 Schindler List / Right and Wrong reason to do comment\n10:02 Comments are a last resort / The proper use of comments\n11:02 Comments Lie\n13:07 Comments do not make up for bad code / Explain Yourself in code\n15:11 Legal and Informative Comments / About Design Patterns book\n20:43 Explanation of Intent / Clarification\n23:21 Warning of Consequences / TODO Comments\n25:59 Amplification / Javadocs in Public APIs\n27:35 Bad and Redundant Comments / Mumbling\n31:25 Mandated Comments\n33:01 Journal Comments / Source code control system\n34:16 Noise Comments / Scary Noise / Use explanatory code, not comments\n36:20 Position Markers / Closing Brace Comments / Attributions and Bylines\n37:43 Commented - Out Code / HTML in comments ICK!\n40:05 Non - Local Information\n41:45 How many lines should there be in a source file?\n46:31 Analysis of the lengths of lines\n50:11 Names are Everywhere / Reveal your intent / Rules to write Names\n58:44 Disambiguate / Avoid Convenient Mispellings\n1:00:41 Number Series / Noise Words / Distinguish Names Meaninfully\n1:02:55 How much time should you spend on a Code Review?\n\nClean Code - Uncle Bob / Lesson 3 - YouTube\n\n0:23 About our genetic origins\n9:36 I am your new CTO / About the growth rate of programmers and its effects\n7:25 Expectations / We will Not Ship Shit\n21:36 We will always be ready / Iteration Length\n25:51 Stable Productivity\n28:14 Inexpensive Adaptability / The software must be changeable\n30:38 Continuous Improvement / The code should improve over time\n31:46 Fearless Competence / Conquer the fear with Test\n42:35 We will not dump on QA / QA will find nothing\n46:30 Automation!\n51:20 We cover for each other / Teamwork\n55:40 Introduction to ‚ÄúHonest Estimates‚Äù\n\nClean Code - Uncle Bob / Lesson 4 - YouTube\n\n0:51 Honest Estimates / What is the chemical formula of water?\n7:16 Selection, Sequence and Interaction / No innovations have been made in the software for decades\n13:48 The Hardware has gone crazy!: comparison between the innovation level of hardware and software today\n17:33 You to say ‚ÄúNo‚Äù\n21:40 Test-Driven Development / TDD rules\n36:14 Our code is a document / Double entry Bookkeeping\n40:22 About inheritance / Mutation Testing\n43:48 Demo of Test-Driven Development\n1:12:23 Some tips to learn and practice Test-Driven Development\n\nClean Code - Uncle Bob / Lesson 5 - YouTube\n\n11:19 Diffraction: Why do incandescent lights glow?\n15:27 Architecture Introduction / I‚Äôve built lots of apps / ‚ÄúI want to be a programmer‚Äù anecdote\n6:09 The Architecture rules are independent of every other variable\n29:21 Working vs. Right\n30:45 What is Design in Architecture?\n31:50 What is the goal of Software Architecture?\n33:28 Case study of bad Architecture\n38:55 Executive View / What went wrong / Secret to going fast\n44:43 Messes aren‚Äôt faster even in the short term\n48:15 Solution of the Executive‚Äôs Dilema / Two Values of Sofware\n52:41 Behavior / Are we going to see self-driving cars?\n1:00:14 Scope vs. Shape / Stakeholders want changes\n1:10:33 Urgency and Importance / Eisenhower Matrix\n1:13:09 Fight for the Architecture\n1:15:14 A Rails App / The web is a Delivery Mechanism\n1:19:06 Architecture Floor Plans / A Use Case Driven Approach\n1:24:05 Interactors / Entities / Interfaces Objects\n1:27:11 Request Model\n1:30:21 What about MCV? / Design Patterns / How MCV goes wrong as a web Architecture\n1:34:53 Model View Presenter / Dependency Rule\n1:39:10 What about the Database? / The Database is a detail / ORM\n1:48:00 Fitnesse: a wiki page project development\n1:53:54 A good Architecture allows major decisions to be deferred! / About IntelliJ and Visual Studio\n2:03:44 Frameworks / Plugin Model\n\nClean Code - Uncle Bob / Lesson 6 - YouTube\n\n0:18 Leds / Introduction.\n6:54 How do you manage a software project?\n12:54 Finding the optimum solution / Data\n21:04 What is the first thing know about project / The Management Paradox\n23:33 The Waterfall Model\n34:13 Iterative Development / Calculate Day\n39:09 The Control Knobs of project mgmt\n48:51 Short Cycles / Agile Software Development Practices / Extreme Programming\n\nüìå Make sure you and your team subscribe (follow me) on ¬†LinkedIn so you don‚Äôt miss out on the latest insights!"
    },{
        "url": "/post/rapid-byte-brilliance-(rbb)-newsletter/",
        "title": "Rapid Byte Brilliance (RBB) Newsletter",
        "date": "Thu Dec 21 2023 00:00:00 GMT+0000 (Coordinated Universal Time)",
        "author": "Bal√°zs HIDEGH√âTY",
        "image": "/post/rapid-byte-brilliance-(rbb)-newsletter/quick learning.jpeg",
        "tags": ["posts","development","startups","SMEs","CTOs","efficiency","CEOs","founders"],
        "categories": [["Newsletter"],["Newsletter","Clean Code"]],
        "summary": "<p>Dear Esteemed <strong>CEOs</strong>, <strong>CTOs</strong>, <strong>VPEs</strong>, and <strong>Technical Leads</strong>, in forging the <strong>excellence</strong> of your software, the <strong>pivotal role</strong> played by your <strong>architects</strong> and <strong>developers</strong>, cannot be overstated.</p>\n<p>Steer your team away from subpar videos and articles to <strong>save their valuable time</strong>. Ensure a trajectory of success by emphasizing that your developers <span class=\"text-highlight\">engage with top-tier learning ‚Ä¶</span></p>\n",
        "text": "Dear Esteemed CEOs, CTOs, VPEs, and Technical Leads, in forging the excellence of your software, the pivotal role played by your architects and developers, cannot be overstated.\nSteer your team away from subpar videos and articles to save their valuable time. Ensure a trajectory of success by emphasizing that your developers engage with top-tier learning materials.\nLink to Newsletter articles on this site\nLink to the Newsletter on LinkedIn\n\nüìå Make sure to follow me on ¬†LinkedIn for exclusive insights and posts that won‚Äôt be included in the newsletter! Don‚Äôt miss out on the extra content!\n\nJoin in to unlock a wealth of expert knowledge at your fingertips!\n\nWhat you will discover are exclusive insights from top-tier developers, presented through engaging posts and videos.\n\nEmbrace a less frequent but impactful content flow. Here, the emphasis is on delivering high-quality, genuinely useful material rather than overwhelming you with an excess of mediocre content.\n\nMy unique contribution is making this invaluable content accessible to my audience, accompanied by quick summaries and notes for effortless later reference.\n\nWhy bother?\n\nThere is no better way to drive progress than to fuel intrinsic motivation.\nWhat‚Äôs more motivating, than a simple and easy way to learn and understand how to create software‚Äîwork to be proud of?\nWhy should you make the effort to do this? We‚Äôre talking about initiating a revolution in your organization! You just need to let it grow and reap the rewards, which include low development and maintenance costs for software.\nYes, CompanyCulture matters a lot, especially when fueled by internal motivation.\nI plan to create a SoftwareDevelopment and SoftwareEngineering post section‚Äîboth on ¬†LinkedIn and on a developer-related page on my consulting company‚Äôs website.\nThis section will feature the best sources, including video and article links from top professional developers, on these topics, showcasing the required way of thinking about:\n\nhow to write quality code\nhow to do refactoring\nhow to design a system process (and how different a process is based on the company size)\n\nStayInformed TechTalks SoftwareEngineeering CompanyCulture"
    },{
        "url": "/post/when-not-to-use-async-communication/",
        "title": "When NOT to use Async Communication",
        "date": "Wed Nov 22 2023 00:00:00 GMT+0000 (Coordinated Universal Time)",
        "author": "Bal√°zs HIDEGH√âTY",
        "image": "/post/when-not-to-use-async-communication/when-not-async.jpeg",
        "tags": ["posts","management","efficiency","entrepreneurship","startups","SMEs","CEOs","founders"],
        "categories": [["Management","Efficiency"]],
        "summary": "<p class>\n  Following my \"Story of staying in Prague\" I realized that, in addition to understanding how to make asynchronous communication work for you, <span class=\"fw-bold\">recognizing when not to use asynchronous communication is equally crucial</span>.\n</p>\n",
        "text": "Following my \"Story of staying in Prague\" I realized that, in addition to understanding how to make asynchronous communication work for you, recognizing when not to use asynchronous communication is equally crucial.\n\nFollowing my &nbsp;&quot;Story of staying in Prague&quot; I realized that, in addition to understanding how to make asynchronous communication work for you, recognizing when not to use asynchronous communication is equally crucial.\n\nMissing, wrong or cumbersome processes will cost you clients! Knowing when to avoid async communication is therefore crucial!\n\nHere are the most important topics where we should AVOID using asynchronous communication, and two more pieces of advice coming at the end as well.\nThe NO-ASYNC Rules\n1Ô∏è‚É£ Time Sensitivity and Emergencies ‚è∞üö®\nIn the fast-paced world of remote work, certain issues require immediate attention. Whether it‚Äôs an urgent matter or last-minute changes, synchronous communication ensures swift responses, preventing potential setbacks. This also includes last-minute changes or urgent issues.\n2Ô∏è‚É£ Negotiation-Driven Discussions üí¨ü§ù\nNegotiations encompass nuances that we may overlook when using asynchronous channels. Synchronous communication permits real-time clarification and a quicker resolution of uncertainties.\nWhen some prerequisites in previously agreed details change, or certain requirements cannot be fulfilled, we should revert to synchronous communication (see the previous point).\nThis situation resonates with my reservation (booking) experience in Prague.\n3Ô∏è‚É£ Ideation and Dynamic Variables üí°üîÑ\nIn creative collaboration, synchronous communication excels. Real-time discussions during complex ideation sessions promote a dynamic exchange of ideas, fostering more innovative solutions.\nYet, some async techniques, like the 6-3-5 BrainWriting (post about it coming soon), also hold promise.\n4Ô∏è‚É£ Escalation-Prone Situations üî•üõë\nCertain scenarios have the potential to escalate if not addressed promptly. Synchronous communication becomes the go-to in preventing and managing situations that could spiral out of control when left to asynchronous channels.\n5Ô∏è‚É£ Delivering Critical Feedback üì£üîÑ\nConstructive criticism is best delivered with immediate context. Make sure to ensure that critical feedback is conveyed in a timely manner, reducing the chances of misinterpretation and allowing for real-time clarification.\n6Ô∏è‚É£ Relationship Building üë•üíº\nBeyond the exchange of information, in-person or video meetings offer a unique opportunity to build stronger relationships. Getting to know a person on a personal level fosters a deeper connection, enhancing collaboration in the long run.\nSummary\nüíª As a Technical Lead, mastering the sync-async balance is my secret sauce to navigating the remote work maze. üßë‚Äçüíª‚öñÔ∏è\nIn conclusion, while async communication has transformed remote work, knowing when to sync up is the key to unlocking seamless collaboration in the digital age. üåêüí¨\nAnd the extra advices‚Ä¶\nBe explicit:\nIt often happens that you initiate communication asynchronously on a platform where responses are not implemented (like the mentioned reservation). Since mishaps occur more often than not, the best thing you can do to avoid future surprises is to explicitly express over what channel you expect to be contacted in case of any problems. üì¢ü§î\nFor effective follow-up with remote teams:\nGiven the importance of synchronous communication, ensuring a couple of shared hours between teams is key. How do you currently manage this within your remote team? Any specific practices or tools you find most helpful? ‚è∞üåê\n\nRemoteWork CommunicationStrategies LeadershipTips BusinessManagement CEOInsights\n\nJoin the conversation on LinkedIn. Your insights are valued."
    },{
        "url": "/post/effective-meeting-rules/",
        "title": "Effective Meeting Rules",
        "date": "Fri Nov 10 2023 00:00:00 GMT+0000 (Coordinated Universal Time)",
        "author": "Bal√°zs HIDEGH√âTY",
        "image": "/post/effective-meeting-rules/effective-meetings.jpeg",
        "tags": ["posts","management","efficiency","entrepreneurship","startups","SMEs","CEOs","founders","linkedIn","productivity-hacks","tips","meetings"],
        "categories": [["Management","Efficiency"]],
        "summary": "<p class=\"fw-bold\">\n  Meetings can be a pain‚Äîwe've all been there. The problem? They often lack a plan, decisions are last-minute, and real progress is rare. But fear not! Let's turn things around with these simple rules to make your meetings actually count!\n</p>\n",
        "text": "Meetings can be a pain‚Äîwe've all been there. The problem? They often lack a plan, decisions are last-minute, and real progress is rare. But fear not! Let's turn things around with these simple rules to make your meetings actually count!\n\nüöÄ Optimize Your Mettings for Success! üìä\n\nAgenda awareness: Ensure everyone knows the agenda in advance. üìÖ No surprises, just efficient discussions.\nInfo Upfront: Communicate crucial info beforehand. üì¢ No one likes last-minute bombshells!\nSet Expectations: Clarify meeting objectives and what you expect from each attendee. üéØ\nActive Participation: Encourage everyone to share their insights. üó£Ô∏è A diverse discussion fuels innovation.\nTime is Precious: Start and end on the dot. ‚è∞ Time management is key to a productive session.\nDecision Protocol: Define how decisions will be made. Consensus? Majority vote? Let it be clear. ü§ù\nFollow-Up Actions: Clearly outline post-meeting tasks. üìã Accountability breeds success.\n\nImplement these rules for meetings that are not just productive but downright stellar! üåü\n\nProductivityHacks CEOStrategies MeetingMastery BusinessExcellence CommunicationTips\n\nJoin the conversation on LinkedIn. Your insights are valued."
    },{
        "url": "/post/effective-async-communication-for-busy-leaders/",
        "title": "Effective Async Communication for Busy Leaders",
        "date": "Thu Nov 09 2023 00:00:00 GMT+0000 (Coordinated Universal Time)",
        "author": "Bal√°zs HIDEGH√âTY",
        "image": "/post/effective-async-communication-for-busy-leaders/effective-async.jpeg",
        "tags": ["posts","management","efficiency","entrepreneurship","startups","SMEs","CEOs","founders","linkedIn","productivity-hacks","tips","chat"],
        "categories": [["Management","Efficiency"]],
        "summary": "<p class=\"d-none fw-bold\">\n  Tired of constant interruptions?\n  <span class=\"text-uppercase\">Say goodbye to productivity killers!</span>\n</p>\n<p class=\"fw-bold\">\n  Context switching in synchronous chat programs can be a real productivity killer, leading to increased interruptions and reduced efficiency.\n  But fear not, we've got the solution to supercharge your work!\n</p>",
        "text": "Tired of constant interruptions?\nSay goodbye to productivity killers!\n\nContext switching in synchronous chat programs can be a real productivity killer, leading to increased interruptions and reduced efficiency.\nBut fear not, we've got the solution to supercharge your work!\n\n&lt;h4&gt;Downsides of Not Following The Rules&lt;/h4&gt;\n\n‚ùå Increased Context Switching\n\n‚ùå Higher Interruptions\n\n‚ùå Reduced Productivity\n\n&lt;h4&gt;The Positive Effects&lt;/h4&gt;\n\n‚úÖ Enhanced Productivity\n\n‚úÖ Better Collaboration\n\n‚úÖ Long-Term Documentation\n\n&lt;h4&gt;Async Management Rules&lt;/h4&gt;\n\n1Ô∏è‚É£ **Turn Sync to Async**: Avoid interrupting your workflow by switching to asynchronous communication.\n\n2Ô∏è‚É£ **Minimize Notifications**: Reduce distractions by limiting the number of notifications you receive.\n\n3Ô∏è‚É£ **Set a D'n'D Schedule**: Disable notifications during focused work hours to maintain productivity.\n\n&lt;h4&gt;Async Content Rules&lt;/h4&gt;\n\n1Ô∏è‚É£ **Provide Context**: Ensure your messages include all necessary information and give the other party time to respond comprehensively.\n\n2Ô∏è‚É£ **Use Formatting Features**: Make your messages more structured and clear.\n\n3Ô∏è‚É£ **Centralize Communication**: Keep specific discussions in designated channels or threads for easier follow-up during async communication.\n\n4Ô∏è‚É£ **Transform Communication into a Long-Living Document**: Turn your discussions into valuable documentation for long-term reference.\n\nüöÄ Implement these rules, and watch your productivity soar! üöÄ\n\nProductivityHacks CEOs Founders CommunicationTips\n\nJoin the conversation on LinkedIn. Your insights are valued."
    },{
        "url": "/post/effective-email-management-for-busy-leaders/",
        "title": "Effective Email Management for Busy Leaders",
        "date": "Wed Nov 08 2023 00:00:00 GMT+0000 (Coordinated Universal Time)",
        "author": "Bal√°zs HIDEGH√âTY",
        "image": "/post/effective-email-management-for-busy-leaders/effective-emails.jpeg",
        "tags": ["posts","management","efficiency","entrepreneurship","startups","SMEs","CEOs","founders","linkedIn","productivity-hacks","tips","emails"],
        "categories": [["Management","Efficiency"]],
        "summary": "<p class=\"fw-bold\">\n Efficient email management is a skill that can transform your daily routine and boost your team's productivity.\n Take the time to refine your email habits, and watch your effectiveness soar! \n</p>\n",
        "text": "Efficient email management is a skill that can transform your daily routine and boost your team's productivity.\nTake the time to refine your email habits, and watch your effectiveness soar!\n\n&lt;h4&gt;Basic Email Management Rules&lt;/h4&gt;\n\nüîï **Disable Notifications**:\nSilence those pings! Notifications can disrupt your workflow.\n\nüïí **Scheduled Check-Ins**:\nSet specific times to check your email. Avoid the constant distraction of notifications and stay focused on your core tasks.\n\nüìë **Sort and Triage**:\nQuickly categorize emails into priority levels. Deal with urgent matters first, and schedule less critical ones for later.\n\n‚úÖ **Zero Inbox Daily**:\nAim to clear your inbox daily. It's a simple but powerful habit that keeps your workload manageable.\n\n&lt;h4&gt;Rules for Writing an Email&lt;/h4&gt;\n\nüö´ **No Long Emails**:\nDon't ever problem-solve in an email. Avoid using it for lengthy, in-depth communication, especially when involving multiple people.\n\nüìå **Bullet Points**:\nKeep your emails concise with bullet points. Limit each email to a maximum of 5 key points for clarity and brevity.\n\nüéØ **Mind Your Audience**:\nTailor your messages to the recipient's needs. Be clear, concise, and respectful of their time.\n\nProductivityHacks CEOTips Founders BusinessLeaders\n\nJoin the conversation on LinkedIn. Your insights are valued."
    },{
        "url": "/post/the-seven-stages-of-expertise-in-software-engineering/",
        "title": "The Seven Stages of Expertise in Software Engineering",
        "date": "Tue Apr 25 2023 00:00:00 GMT+0000 (Coordinated Universal Time)",
        "author": "Meilir Page-Jones | Bal√°zs HIDEGH√âTY",
        "image": "/post/the-seven-stages-of-expertise-in-software-engineering/7 stages.jpg",
        "tags": ["posts","HR","HR","classification","startups","team-setup","avoid-failures","entrepreneurship","SMEs","CEOs","founders"],
        "categories": [["HR","Classification"]],
        "summary": "<p>This article is still <strong>relevant for any startup or company involved in software development</strong>. It contains useful informations - just like &quot;Clean Code&quot; by Robert C Martin - <strong>details within this article are timeless</strong>.</p>\n<p>I first came across this article around 2016, when I noticed a large <strong>disparity between the usual junior-mid-senior scaling</strong> of developers. This scaling system, unlike ‚Ä¶</p>\n",
        "text": "This article is still relevant for any startup or company involved in software development. It contains useful informations - just like ‚ÄúClean Code‚Äù by Robert C Martin - details within this article are timeless.\nI first came across this article around 2016, when I noticed a large disparity between the usual junior-mid-senior scaling of developers. This scaling system, unlike others, is universal, easy to understand, and the bear hunting analogy used in the original article by Meilir Page-Jones makes it a humorous and enjoyable read.\nSince then, the original page has been taken down (an archive can be found here). With the permission of the author, I am allowed to distribute the original article.\nI made some slight changes by adding additional titles and styling. Since there is more behind the seven stages, it is likely to be referenced frequently.\nWe hope you enjoy reading this article and that it helps your next projects be successful.\n\nThe Seven Stages of Expertise in SWE\nMeilir Page-Jones ¬© Copyright 1998, Wayland Systems Inc. All rights reserved.\n(In this article, an indefinite ‚Äúhe‚Äù means ‚Äúhe or she‚Äù.)\nIntro\nFor almost two decades we at Wayland Systems Inc. have toiled to transfer the latest developments in software engineering to practitioners at large and small companies around the world. However, until recently we didn‚Äôt do a very good job of quantifying the long-term field results of our efforts. So we decided to ask a question reminiscent of the rhetoric of Ed Koch (the former mayor of New York City): ‚ÄúHow‚Äôre we doin‚Äô?‚Äù\nWe surveyed some of our clients to whom we‚Äôd provided education and consulting over the years and discovered an interesting but very disturbing fact. Over 50% of the shops into which we‚Äôd introduced Software Engineering techniques had either abandoned the use of the techniques or had let their band of active practitioners shrink to a dwindling core of diehards. What was going wrong here?\nWe turned to self-examination and reviewed our courses and consulting practices. But, whatever the problem was, it didn‚Äôt seem limited to Wayland Systems: Informal discussions with our competitors revealed that they too were having similar problems. The attrition rate across our whole industry was painfully high.\nFactors Affecting Productivity\nExternal examination revealed several factors at work, many of which were to do with corporate management habits. Examples of these were:\n\nunrealistic management expectations\na lack of commitment to quality\nan obsession with coding (which we termed WIMP ‚Äî ‚ÄúWhy isn‚Äôt Marvin Programming?‚Äù ‚Äî management)\npernicious deadlines\nand a misallocation of skills to tasks\n\nOther factors included: engineers‚Äô resistance to change; engineers‚Äô reluctance to participate in team approaches; and the then-unavailability of useful CASE tools.\nThe above factors were significant and worthy of articles in their own right. However, there was another factor, which is more important and fundamental than the others. This factor is the way that people are able to absorb sophisticated new techniques and then to apply them to their work ‚Äî in other words the stages of expertise through which we all pass as we learn and use new and powerful disciplines.\nAt first we were aware only that there were two types of person: novice and expert. That was hardly earth-shattering news. However, further research revealed that there are actually seven stages of expertise through which a person may pass on the journey from total ignorance to world-class knowledge. With devastating acumen we numbered these seven stages Stages 1 through 7. (We also gave them names: Innocent, Exposed, Apprentice, Practitioner, Journeyman, Master and Expert.) As I‚Äôll discuss below, these seven stages have a deep impact on the successful ‚Äî or otherwise ‚Äî introduction of software engineering into an organization.\nA participant at a conference asked me how universal these seven stages are.\n\n‚ÄúVery universal,‚Äù I answered.\n‚ÄúYou mean that I could even apply them to the skill of bear-hunting?‚Äù he retorted unexpectedly.\n‚ÄúYes,‚Äù I said.\n\nSo, if you‚Äôll bear with me, I should like to illustrate the Seven Stages of Expertise with reference to hunting (although I‚Äôm most definitely not a fan of such an activity). Following that illustration I‚Äôll outline the application of the Seven Stages to our own business of Software Engineering.\nThe 7 Stages in Bear-Hunting\nStage 1: Innocent\n‚Äî A Stage-1 person has never seen or heard of bears. It would not occur to a Stage-1, if he encountered a bear, that the bear could be hunted. Neither would he realize that a bear is a potential source of danger.\nStage 2: Exposed\n‚Äî A Stage-2 person has seen an occasional bear and has read articles in airline magazines suggesting that bears may be hunted. Moreover, a Stage-2 probably has friends that have hunted bears and has learned some desultory but intriguing facts about bears and their habits. He is motivated to learn more.\nStage 3: Apprentice\n‚Äî A Stage-3 has attended a 5-day seminar on bear hunting. During this seminar, the participants form into teams of three or four and practice hunting very small bears under the ever-watchful eye of the instructor. After a few interim setbacks, by Friday afternoon all the teams have successfully hunted their bears. They fill out evaluation forms attesting that ‚Äúbear hunting is very useful and relevant to my job.‚Äù However, they are barely prepared for the world of real bears.\nStage 4: Practitioner\n‚Äî The Stage-4, having completed formal bear-hunting education, is full of confidence. He‚Äôs ready to transcend the minuscule bears of the 5-day workshop and go out for real bears, larger bears, fierce bears. He‚Äôs ready for Ursa Major. His manager is also keen to send him out with the latest bear-hunting techniques because the users want fur and they want it yesterday. Unfortunately, in the resulting scramble the budding bear hunter may be sent out without a map and with the wrong calibre arrow in his longbow. In the heat of ursine confrontation, the Stage-4 may also forget or misinterpret his classroom instruction and precipitate disaster. It‚Äôs typical that some Stage-4s get some bears; but it‚Äôs also typical that some bears get some Stage-4s.\nStage 5: Journeyman\n‚Äî The Stage-5 has survived the traumas of Stage-4 and has bear hunting down cold. The Stage-5 uses modern bear-hunting techniques naturally and automatically; in fact, he can‚Äôt imagine how he ever got along without them. He is accurate and productive: The Steering Committee merely points out the bear and he hunts it within both budget and deadline. The Stage-5 is the exemplary modern hunter that salespeople of bear-hunting seminars refer to in their brochures.\nStage 6: Master\n‚Äî Stage-6 bear hunters have internalised not only the mechanics of bear hunting but also the principles underlying the techniques. Stage-6s know more than rules: They know why the rules exist and even when it‚Äôs permissible to break them. For example, a Stage-3 or 4 may stand upwind of a bear accidentally and scare off the bear. However, a Stage-6 may know that by wearing Yogi-Spray Deodorant he can stand upwind without being detected and can thus surprise the bear from an unexpected quarter. Because of their deep knowledge, Stage-6s are very capable of training others in hunting techniques.\nStage 7: Researcher\n‚Äî Stage-7s are asked to write books and give talks at bear-hunting user groups. They are also engaged in extending and generalizing bear-hunting techniques to solve new problems. For example, a Stage-7 may extend bear hunting to work also on Big Foot or he may even develop the ultimate Yeti-Oriented Hunting Methodology.\nThe 7 Stages in SWE\nNow let‚Äôs come back to the world of software engineering and see how the Seven Stages of Expertise apply to us.\nStage 1: Innocent\nA Stage-1 may not have heard of Software-Engineering techniques. Or ‚Äî more likely nowadays ‚Äî he may be vaguely aware of their existence but may not see their possible relevance to his situation. Indeed, he may be only dimly aware that there are any software-development problems in his shop. You may find it incredible that Stage-1s could exist in the 1990s, but they do. And the reason stems from the way in which software complexity evolved.\nSoftware became insidiously more and more complex in the 1970s and 1980s as users demanded more and more sophisticated systems be installed on the more and more powerful hardware that became available. Yet there was no sharp transition. The earth was not hit by a Complexity Asteroid in 1975 that suddenly made software three orders of magnitude more complex and cast our reptilian development techniques into extinction.\nI call the way in which software complexity actually increased ‚ÄúFrog in the Pan.‚Äù This is because although a frog will jump out of a pan of hot water, a frog that is placed in a pan of cold water and slowly heated will fail to leap forth and will actually boil to death. The temperature gradient is so gradual that there will never be a point at which the frog declares: ‚ÄúBoy, it‚Äôs suddenly gotten hot in here! I think I should hop out.‚Äù (Before I get into deeper trouble from animal-rights folks, I hasten to add that this analogy is apocryphal. I‚Äôve never tried the experiment and I don‚Äôt recommend that you do so either!)\nMany Stage-1s are experiencing ‚ÄúFrog in the Pan‚Äù and are trying to tackle problems of the 1990s with approaches of the 1960s and 1970s, without realizing that the problems they‚Äôre facing are the very ones that modern Software-Engineering techniques were created to alleviate.\nStage 2: Exposed\nStage-2s have noticed that the water is getting decidedly warm, if not downright hot. So they are actively seeking Software-Engineering techniques that will get them out of the pan or at least reduce the heat. Stage-2s may survey magazines, confer with colleagues or attend one-day overviews of the techniques. Their interest level is high but their knowledge level is low, being limited to a few terms and definitions and not based on any practical Software-Engineering experience.\nStage 3: Apprentice\nStage-3s have attended one or two 5-day workshops on Software-Engineering techniques. In these workshops they tackled small but realistic case studies that resembled their own projects in miniature. The case studies provided valuable kinaesthetic reinforcement of the formal lecture material and were thus indispensable. However, the case studies‚Äô apparent realism conveyed to the Stage-3 a confidence that is often unwarranted.\nIf a Stage-3 absorbs everything from a seminar, then he is minimally equipped to tackle a true, full-sized project in the corporate jungle. Usually, however, a Stage-3 does not grasp everything or has difficulty scaling the techniques up from a case study to a real project. You could say that most Stage-3s know just enough to be dangerous!\nStage 4: Practitioner\nThe rite of passage to Stage-4 is the use of Software-Engineering techniques on at least one significant project. Achieving ‚ÄúStage-4-hood‚Äù is for many people the most difficult transition of the six transitions between stages. The fledgling Stage-4 is asked to take untried (by him) techniques and apply them to a corporate project with the usual demonic cocktail of politics, deadlines and changing requirements. At the same time, he is attempting to recall what he learned in class and scale up the examples 10- or 100-fold. He continually needs consulting advice, without which he will encounter a series of minor setbacks or major failures. Since many people throw up their hands at this point and revert to their old mediocre but familiar ways, a large proportion of Stage-3s never make it to Stage-4. If an entire project is peopled with Stage-3s, then it‚Äôs highly likely that the project itself will fail and the Software-Engineering techniques will be publicly pilloried and then abandoned.\nStage 5: Journeyman\nStage-5s have made it. Their experience of Software Engineering is ‚Äúlatched‚Äù in place and there is little risk of their reverting to the past. In the Stage-5 the Software Engineering techniques yield for the first time the productivity the marketing folks promised; and on each successive project a Stage-5 further hones his skill and enhances his productivity. A Stage-5 is self-sufficient - more often the source of Software-Engineering advice than its recipient.\nStage 6: Master\nThe Stage-6 not only is an adept technician, but also possesses a profound methodological foundation. Beyond the ‚Äúwhats‚Äù and ‚Äúhows‚Äù, the Stage-6 knows the ‚Äúwhys‚Äù of Software Engineering. This depth allows him sometimes to break a surface rule, while adhering to a more fundamental methodological principle. The Stage-6 is a good instructor because his theoretical and practical knowledge give him the wherewithal to tackle difficult student questions.\nStage 7: Researcher\nThe Stage-7 is concerned with delivering the latest developments in Software Engineering to a wider audience, via books, articles and conference appearances. The Stage-7 looks out for flaws in contemporary Software-Engineering techniques and for consequent ways to improve the techniques. He also scans the horizon for new problems towards whose solution Software Engineering can be extended and generalized. The Stage-7 is at a methodological pinnacle.\nBehind the Seven Stages (Productivity, Starting Projects, ‚Ä¶)\nThese Seven Stages of Expertise are valuable in their own right. You might think about a Software-Engineering technique that you know and consider which of the stages you are in with respect to that technique. You may also decide what (if anything) you should do to progress to the next stage.\nHowever, there are organizational implications behind the Seven Stages. Below I discuss four of these:\n\nThe Productivity Curve\nPilot Projects\nThe Critical Consulting Core and Ephemeral Technology.\n\nA. The Productivity Curve\nVendors who sell Software-Engineering techniques do so by convincing management of their boon to productivity. Although vendors rarely say so explicitly ‚Äî we at Wayland Systems never used to ‚Äî they compare the productivity of Stage-5s to that of Stage-2s. Unfortunately, this presentation (see Fig. 1) is not a complete picture. Between Stage-3 and Stage-4 there‚Äôs a hair-raising ‚ÄúJ-curve‚Äù of productivity (see Fig. 2), which represents the difficult rite of passage of the incipient Stage-4.\n\nFig. 1 - The productivity curve as perceived by managers\n\nFig. 2 - The actual productivity curve as observed in reality\n\nThis J-curve has led more than one manager to abandon all hope in Software-Engineering techniques. Such a manager is not merely impatient; no one warned him of the J-curve and so when it manifests itself he can only assume that the much-touted Software-Engineering techniques were mere hokum.\nA couple of our clients measured the length of time from Stages 3 to 5. Depending on the individual person, Stage-3 to Stage-4 took 6 to 18 months (about the length of a project or phase) and Stage-4 to Stage-5 took 18 to 36 months. (These times are very approximate because of the subjective nature of the stages.) Except for a few outstanding people, the shortest time from Software-Engineering seminar to exquisite software productivity is 24 months. When managers tell me: ‚ÄúWe just can‚Äôt wait that long,‚Äù I retort: ‚ÄúThe 2 years will pass anyway, whether you do anything or not. Act now!‚Äù\n(By the way, notice that Stage-7s have lower project productivity than Stage-6s. This is because a portion of Stage-7s‚Äô energy is directed away from the specific project and towards general methodological research.)\nB. Pilot Projects\nBut the J-curve has a facet nastier than simple delay in productivity. This is the ‚ÄúWho will bell the cat?‚Äù problem. In the fable of that title, a group of mice that‚Äôd been persecuted by a cat decided to hang a bell around the cat‚Äôs neck that would warn them of its approach. All agreed that this was a wonderful idea ‚Ä¶ but there was one minor difficulty: None of the mice wanted to be the one to risk walking up to the sleeping cat to tie a bell around its neck. This impasse is known formally as the Technology Trap.\nMost project managers would agree that Software-Engineering techniques are a Good Thing. But which of them with bone-crushing deadlines and axe-wielding users wants to be the first to experience the depths of the J-curve. (Me neither!) Thus many shopfuls of intelligent people appear to be dinosaurs because the Technology Trap holds them in the 1970s.\nIf ‚Äúwho will bell the cat?‚Äù is a problem, then I recommend that you try Software-Engineering techniques on a pilot project first. The pilot will uncover all manner of pitfalls that occur during the Stage-3/4 transition as well as problems in the techniques themselves. The pilot should be short (6 months) and should yield a non-critical system. You should learn as much as you can about applying the new technology from the pilot project; this is one project where the learning experience is more important than the end product.\nA pilot project will not eliminate J-curves on subsequent projects. People will still have to go from Stage-3 to Stage-4. But the pilot will make future J-curves shallower, as some causes of the curve‚Äôs nadir are removed. Indeed, although the delivered system is the most important product of most projects, you should never forget the learning by-product of every project. Review what you discovered about doing projects when you complete each project and share that information with others. In that sense, treat every project as a pilot.\nC. Core of Internal / External Consultants\nOne of the surest recipes for disaster is to staff a project with only Stage-3s. Yet many managers do exactly that, pushing a group of analysts through a seminar one week and letting them loose on a crucial project the next week. (Jerry Weinberg refers to this as the ‚ÄúSheep Dip‚Äù approach.)\nEvery project should have access to a Stage-5, or - better still ‚Äî have a Stage-5 on the project team. Cultivate your own Stage-5s and Stage-6s in-house as part of your long-term staff-development policy and make them available to project teams. If you don‚Äôt yet have such people on board, then call in external consultants from Wayland Systems or one of our competitors. However, don‚Äôt become chronically reliant on external consultants, but instead continue to work on building up a pyramid of internal expertise with Stage-6s at the top that will ensure a lasting mastery of Software Engineering.\nD. Learning Latency vs. Lifetime of Technique\nOne manager of a major organization recently complained to me that by the time a critical mass of his people had learned a Software-Engineering technique that technique had been left behind in the mud of obsolescence by the relentless march of progress. Although there is, of course, some truth in this complaint, it is also true that ‚Äúplus √ßa change, plus c‚Äôest la m√™me chose.‚Äù If you buy a power drill to replace a manual drill, the deep principles of drilling will be largely unchanged. Similarly, most new Software-Engineering methods are basically founded on familiar underlying methodological principles (such as the principle of ‚ÄúSafe Deferral‚Äù or of ‚ÄúPartitioning to Minimize Interfaces‚Äù).\nDevelop a large ‚Äúcapacitance‚Äù of Stage-6s in your organization in order to smooth the apparent high-frequency ripples in technology. These people will be able quickly to absorb a new technique and to assess its applicability to the shop‚Äôs needs. They will also be able to compare and contrast the new technique to current techniques and to steady the transition from old to new, because many of the new ways of addressing software are simply refinements of ways already known to Stages 3, 4 and 5.\nSome Recommendations\n\nBe aware of the Seven Stages of Expertise and their effects on productivity under a specific Software-Engineering technique. Reconcile your expectations for Software Engineering with the realities of the Seven Stages.\nTake stock of where you are. Have each person assess his stage with respect to each Software-Engineering technique that your shop uses.\nHave each person state their medium- and long-term goals for expertise in each relevant technique and suggest a plan for achieving those goals.\nEstablish similar medium- and long-term goals for the shop as whole. Determine the most appropriate blend of stages for the work that you do and set up a plan to achieve that blend.\nNever attempt a crucial project solely with Stage-3s and below. Seed each project with Stage-4s and allow access to Stage-5s and 6s if possible. If you don‚Äôt have a Stage-5, beg, borrow, steal, buy, kidnap‚Ä¶ one. External consultants are valuable as a short-term measure.\nStabilize the effects of technological change by nurturing an in-house expertise (Stage-6) in fundamental methodological principles. Try to formulate shop strategies (as much as you can) in non-technological terms. Superimpose technology on to the strategy in order to yield tactics.\nHave a mission that will never go away. For example, the mission of Wayland Systems is ‚ÄúMastery in Software Engineering.‚Äù In other words, we seek to assist our clients in becoming self-sustaining at at least the Stage-6 level of Software Engineering. This mission will not evaporate for many decades yet, for software is becoming ever more complex and ever more critical. There will be much to learn ‚Äî even for Stage-6s and Stage-7s ‚Äî as we pass into the new century."
    }
]